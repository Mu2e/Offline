#
#  Legacy prolog: will be removed soon
#
BEGIN_PROLOG
# prolog which should be elsewhere, FIXME
  pidPathBins: [ 0., 50., 100., 150., 200., 250., 300., 1.e12 ]

  TrkCaloDiag : {
    PIDdt : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_dt.tbl"
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_dt.tbl"
      }
    }
    PIDEp : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
    }
    caloMatchingRoot : "TrackCaloMatchingTRF"
  }
#Generic ReadKalFits config. 
  ReadKalFits : {
    module_type: ReadKalFits
    fitterModuleLabel: KFFDeM
    KalDiag : @local::KalDiagReadMDC # configure KalDiag to read MDC2018 data files
    TrkCaloDiag : @local::TrkCaloDiag
    eventWeightModules : [ ]
  }
#
# Prototype track analysis config.
  TrackAnalysis : {
    module_type : TrackAnalysis
    KalFinalTagRoot : KFF
    TrkQualTagRoot : TrkQual
#   KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 Beam Sim Particles
    KalDiag : @local::KalDiagReadMDC # configure KalDiag to read MDC2018 data
    # change this if reading cosmic data or generating inline
    TrkCaloDiag : @local::TrkCaloDiag
    CrvCoincidenceModuleLabel : "CrvCoincidenceClusterFinder"
    CrvCoincidenceMCModuleLabel : "CrvCoincidenceClusterMatchMC"
    # want to keep track of the mean beam intensity that was assumed in the simulation
    MeanBeamIntensity : "protonBunchIntensity:MeanIntensity"
    PBIWeightTag : "PBIWeight"
  }
  # Track qulaity module
  TrkQual : {
  	  module_type : TrackQuality
  	  TrkQualMVA : { MVAWeights : "TrkDiag/test/TrkQual.weights.xml" }
  }

  TrkQualDeM		       : @local::TrkQual
  TrkQualDeM.KalSeedCollection : "KFFDeM"
  TrkQualUeM		       : @local::TrkQual
  TrkQualUeM.KalSeedCollection : "KFFUeM"
  TrkQualDmuM		       : @local::TrkQual
  TrkQualDmuM.KalSeedCollection : "KFFDmuM"
  TrkQualDeP		       : @local::TrkQual
  TrkQualDeP.KalSeedCollection : "KFFDeP"
  TrkQualUeP		       : @local::TrkQual
  TrkQualUeP.KalSeedCollection : "KFFUeP"
  TrkQualDmuP		       : @local::TrkQual
  TrkQualDmuP.KalSeedCollection : "KFFDmuP"

# TrkCaloIntersection by default looks for merged tracks; repoint to the tracker-found tracks
  TrackCaloMatching : { @table::TrackCaloMatching 
    producers : { @table::TrackCaloMatching.producers 
      TrackCaloIntersectionTRFDem : { @table::TrackCaloMatching.producers.TrackCaloIntersectionDem
	fitterModuleLabel : KFFDeM
      }
      TrackCaloMatchingTRFDem : { @table::TrackCaloMatching.producers.TrackCaloMatchingDem
	fitterModuleLabel : KFFDeM
	trkToCaloExtrapolModuleLabel: TrackCaloIntersectionTRFDem
      }
      TrackCaloIntersectionTRFDep: { @table::TrackCaloMatching.producers.TrackCaloIntersectionDep
	fitterModuleLabel : KFFDeP
      }
      TrackCaloMatchingTRFDep : { @table::TrackCaloMatching.producers.TrackCaloMatchingDep
	fitterModuleLabel : KFFDeP
	trkToCaloExtrapolModuleLabel: TrackCaloIntersectionTRFDep
      }
    }
  }
  TrackCaloMatching.matching_dem_TRF : [ TrackCaloIntersectionTRFDem, TrackCaloMatchingTRFDem ]
  TrackCaloMatching.matching_dep_TRF : [ TrackCaloIntersectionTRFDep, TrackCaloMatchingTRFDep ]
  PBIWeight : { 
    module_type : PBIWeight
    PBITag : "protonBunchIntensity"
    meanPBITag : "protonBunchIntensity:MeanIntensity"
  }
#
 TrkAna : {
    # diagnostic Reco sequences starting from digis
    EventWeightSequence : [ PBIWeight ]

    TrkQualSequence : [ TrkQualDeM, TrkQualUeM, TrkQualDmuM,
    		      	TrkQualDeP, TrkQualUeP, TrkQualDmuP ]

    TrkPIDSequence : [ TrkPIDDeM, TrkPIDDeP ]

    EndSequence : [ TrkAnaNeg, TrkAnaPos ]
  TrkRecoSequence : [ @sequence::TrkHitReco.PrepareHits,
		     @sequence::Tracking.TPRDeM,
		     @sequence::Tracking.TPRUeM,
		     @sequence::Tracking.TPRDmuM,
                     @sequence::Tracking.TPRDeP,
                     @sequence::Tracking.TPRUeP,
                     @sequence::Tracking.TPRDmuP ]
  CrvRecoSequence : [ CrvRecoPulses, CrvCoincidence, CrvCoincidenceClusterFinder, CrvCoincidenceClusterMatchMC ]


    CaloRecoSequence : [ @sequence::CaloReco.Reco,
			 @sequence::CaloCluster.Reco ]
   
    producers : {
      @table::TrkHitReco.producers
      @table::Tracking.producers
      @table::CaloReco.producers
      @table::CaloCluster.producers
      @table::TrackCaloMatching.producers
      @table::CrvResponsePackage.producers
      @table::TrackCaloMatching.producers
      TrkQualDeM : @local::TrkQualDeM
      TrkQualUeM : @local::TrkQualUeM
      TrkQualDeP : @local::TrkQualDeP
      TrkQualUeP : @local::TrkQualUeP
      TrkQualDmuM : @local::TrkQualDmuM
      TrkQualDmuP : @local::TrkQualDmuP
      PBIWeight: @local::PBIWeight
    }
     analyzers : {
      genCountLogger: { module_type: GenEventCountReader }
      TrkAnaNeg: {
        @table::TrackAnalysis
        TrkParticle : 11
      }
      TrkAnaPos: {
        @table::TrackAnalysis
        TrkParticle : -11
      }
    }

  }

TrkCaloMatchSequence : [ @sequence::TrackCaloMatching.matching_dem_TRF, 
                         @sequence::TrackCaloMatching.matching_dep_TRF ]
  # aggregate these for convenience
TrkAna.TrkCaloRecoSequence : [ @sequence::TrkAna.EventWeightSequence,
			    @sequence::TrkAna.CaloRecoSequence,
			    @sequence::TrkAna.TrkRecoSequence,
			    @sequence::TrkAna.TrkQualSequence,
		            @sequence::TrkCaloMatchSequence ]
TrkAna.TrkCaloCrvRecoSequence : [ @sequence::TrkAna.TrkCaloRecoSequence,
				 @sequence::TrkAna.CrvRecoSequence ]

END_PROLOG
