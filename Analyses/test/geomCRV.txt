//
// Main geometry file for Mu2e.
//
// $Id: geomCRV.txt,v 1.4 2011/05/16 16:27:47 rhbob Exp $
// $Author: rhbob $
// $Date: 2011/05/16 16:27:47 $
//
// Original author Rob Kutschke
//
// Warning:  do not write 10000. as 10,000.; it will be read as two numbers (10., 0.).

#include "Mu2eG4/test/geom_01.txt"

bool hasHall            = true;
bool hasTarget          = true;
bool hasProtonAbsorber  = true; 
bool hasNeutronAbsorber = true;
bool hasCalorimeter     = true;
bool hasBFieldManager   = true;
bool hasBeamline        = true;
bool hasVirtualDetector = true;
bool hasCosmicRayShield = true;
bool hasMBS             = true; // MBS assumes the presence of CosmicRayShield(Steel) & NeutronAbsorber

// Some G4 controls which does not allow it to consume all the memory 
// or to spend all the time tracking one bad particle
int g4.steppingActionMaxSteps = 10000;
int g4.stepsSizeLimit = 10000;
int g4.particlesSizeLimit = 10000;

// Enable/disable code that kills uninteresting tracks in SteppingAction or TrackingAction.
bool   g4SteppingAction.killLowEKine  = false;
bool   g4SteppingAction.killInHallAir = false;
bool   g4SteppingAction.killerVerbose = false;
double g4SteppingAction.eKineMin      = 0.000001;    // Kinetic energy in MeV; 1 eV for CRV neutron studies

// Parameters of the CRS Scintillator Modules (length in mm)
// data based mainly on Mu2e Document 388-v1 Mu2e Proposal, fig 11.6,
// p174 11.9 p.179 and fig 4.6.9/text in 1330v2

int            crs.scintillatorLayersPerModule              = 3;
int            crs.scintillatorBarsPerFullLayer             = 20;
vector<double> crs.scintillatorBarHalfLengths               = { 5.,  2475., 50.}; 
string         crs.scintillatorBarMaterialName              = "G4_POLYSTYRENE";
double         crs.scintillatorLayerShift                   = 25.0;
double         crs.scintillatorLayerGap                     = 0.0;
double         crs.scintillatorBarPigmentationHalfThickness = 0.125; // not used for now
string         crs.scintillatorBarPigmentationMaterialName  = "G4_TITANIUM_DIOXIDE"; 
vector<double> crs.scintillatorModuleOuterSheetHalfLengths  = { 0.8, 2475., 1045.}; // 0.063"=1.6mm;
string         crs.scintillatorModuleOuterSheetMaterial     = "G4_Al";
string         crs.scintillatorModuleInterLayerSheetMaterialName  = "G4_POLYSTYRENE";
double         crs.scintillatorModuleInterLayerSheetHalfThickness = 6.0; // 0.125"=3.175mm; or 57.2-30-3.2/4
vector<double> crs.moduleUnistrutHalfLengths                = {28.,  2475., 157.}; // fig 11.9 p.179 
double         crs.wallUnistrutHalfThickness                = 28.;  // (154 - 41)/4 = 28.25 ~28
// assume the unistrut on the steel to be of the same thickness as the one on the modules
double         crs.scintillatorOverlap                      = 100.; // fig 11.5 

// full, half modules, more specific numbers TBD
vector<int>    crs.shieldR_NumberOfModules  = {10,  1};
vector<int>    crs.shieldL_NumberOfModules  = { 8,  1};
vector<int>    crs.shieldD_NumberOfModules  = { 2,  1};
vector<int>    crs.shieldU_NumberOfModules  = { 3,  1};
vector<int>    crs.shieldT_NumberOfModules  = {10,  1};
vector<int>    crs.shieldB_NumberOfModules  = {10,  1};
vector<int>    crs.shieldTS_NumberOfModules = { 2,  6}; // not implemented yet

// additional relative offsets wrt the center of the shields in their local reference frame before rotation

vector<double> crs.shieldR_Offset  = {   0., 75.,1419.};
vector<double> crs.shieldL_Offset  = {   0., 75.,-531.};
vector<double> crs.shieldD_Offset  = {1670.,  0.,   0.};
vector<double> crs.shieldU_Offset  = {4508.,  0., 925.};
vector<double> crs.shieldT_Offset  = {   0., 75.,1419.};
vector<double> crs.shieldB_Offset  = {   0., 75.,1419.};
vector<double> crs.shieldTS_Offset = {   0.,  0., 0.};

bool   crs.vetoVisible    = true;
bool   crs.vetoSolid      = false;
int    crs.verbosityLevel = 0;



// Neutron Absorber (document draft dated 2010-07-16)
string neutronabsorber.materialName          = "Polyethylene092B300d119";
//string neutronabsorber.materialName          = "WAGVacuum";
double neutronabsorber.internalOuterRadius   =  940.0;
double neutronabsorber.internalInnerRadius0  =  460.0;
double neutronabsorber.internalInnerRadius1  =  710.0;
double neutronabsorber.internalInnerRadius2  =  850.0;
double neutronabsorber.internalHalfLengthZ01 = 2197.5;
double neutronabsorber.internalHalfLengthZ02 = 3515.0;
double neutronabsorber.internalZ01           = 6202.5; // 4005+8400/2
double neutronabsorber.externalHalfLengthZ   = 6220.0;
double neutronabsorber.externalHalfLengthXY  = 1475.0;
double neutronabsorber.externalHalfThickness =   75.0;
double neutronabsorber.externalZ0            = 9219.0; // 2999+15439/2

int    neutronabsorber.verbosityLevel = 0;
bool   neutronabsorber.visible      = true;
bool   neutronabsorber.solid        = false;

// Muon Beam Dump/Stop

// except for one of the Z offset values the rest is computable from the other values

// the Z values were adjusted from mu2e doc-1351 based on doc-1186 also to
// fit with the previously implemented components

// the initial implementation is described in doc-1519

double mbs.BSTSInnerRadius  =   410.0;
double mbs.BSTSOuterRadius  =   430.0;
double mbs.BSTSHLength      =  1700.0; 
string mbs.BSTSMaterialName = "StainlessSteel";
double mbs.BSTSZ            = 15150.0; 
double mbs.SPBSInnerRadius  =   430.0;
double mbs.SPBSOuterRadius  =   452.0;
double mbs.SPBSHLength      =  1320.0;
string mbs.SPBSMaterialName = "G4_Pb";
double mbs.BSTCInnerRadius  =   390.0;
double mbs.BSTCOuterRadius  =   410.0;
double mbs.BSTCHLength      =   375.0;
string mbs.BSTCMaterialName = "Polyethylene092B300d119";
double mbs.BSBSInnerRadius  =   320.0;
double mbs.BSBSOuterRadius  =   410.0;
string mbs.BSBSMaterialName = "Polyethylene092B300d119";
double mbs.CLV2InnerRadius  =    50.0;
double mbs.CLV2OuterRadius  =   320.0;
double mbs.CLV2HLength      =    50.0;
string mbs.CLV2MaterialName = "Polyethylene092B300d119";
double mbs.CryoSealHLength    = 150.0;
string mbs.CryoSealMaterialName = "StainlessSteel";
string mbs.EndPlugMaterialName  = "StainlessSteel";
double mbs.EndPlugDiskHLength   = 50.0;

int    mbs.verbosityLevel = 0;
bool   mbs.visible      = true;
bool   mbs.solid        = false;

//
//
// End notes:
// 
// 1) Sources of information:
//    
//
//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
