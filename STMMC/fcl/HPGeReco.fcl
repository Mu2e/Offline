#include "Offline/fcl/standardServices.fcl"
#include "Offline/STMConditions/fcl/prolog.fcl"
#include "Offline/STMReco/fcl/prolog.fcl"
#include "Offline/STMMC/fcl/prolog.fcl"

process_name: HPGeReco

# source : {
#   module_type : RootInput
#   # maxEvents : @nil
# }

services : @local::Services.SimAndReco

physics : {
  producers : {
    HPGeDigi : {
      module_type : HPGeWaveformsFromGeantSim
      fADC : @local::STMDAQParameters.samplingFrequencies.HPGe
      EnergyPerADCBin : @local::HPGeDigitization.EnergyPerADCBin
      noiseSD : @local::HPGeDigitization.PreamplifierNoiseSD
    }
    HPGeZS : {
      module_type : STMZeroSuppression
      stmWaveformDigisTag : "HPGeDigi"
      tbefore : @local::STM.HPGe.tbefore
      tafter : @local::STM.HPGe.tafter
      threshold : @local::STM.HPGe.threshold
      window : @local::STM.HPGe.window
      naverage : @local::STM.HPGe.naverage
      verbosityLevel : 1
    }
    HPGeMWD : {
      module_type : STMMovingWindowDeconvolution
      stmWaveformDigisTag : "HPGeZS"
      verbosityLevel : 1
      tau : @local::STM.HPGe.tau
      M : @local::STM.HPGe.M
      L : @local::STM.HPGe.L
      nsigma_cut : @local::STM.HPGe.nsigma_cut
      thesholdgrad : @local::STM.HPGe.thresholdgrad
    }
  }
  # filter844 : []
  # digitization_path : [HPGeDigi ] #, HPGeZS, HPGeMWD ]
  trigger_paths : [digitization_path]
  output_path : [compressedOutput]
  end_paths : [output_path]
}

outputs : {
  compressedOutput : {
    module_type : RootOutput
    fileName : "dig.mu2e.HPGeDigis.MDC2020ap.000001_00000000.art"
    #outputCommands : [
    #]
  }
}

services.SeedService.baseSeed : 1
