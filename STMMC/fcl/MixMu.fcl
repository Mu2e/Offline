# Mixes the POT events into microspill events. Needs to be run manually with the microspill number as the number of events due to the mixing structure
# Original author: Pawel Plesniak

#include "Offline/fcl/standardServices.fcl"
#include "Offline/STMMC/fcl/prolog.fcl"

process_name: STMMix

source : {
  module_type : EmptyEvent
}

services : @local::Services.SimAndReco

physics : {
  producers : {
    PBISim : { # gives the number of POT per microspill
      module_type: ProtonBunchIntensityLogNormal
      SDF: @local::MixSTMEvents.SDF
      extendedMean: @local::MixSTMEvents.extendedMean2BB
      cutMax: @local::MixSTMEvents.cutMax2BB
    }
  }
  filters : {
    STMStepMixer: {
      module_type         : MixBackgroundFrames
      fileNames           : ["/pnfs/mu2e/resilient/users/plesniak/Analysis/MuCat.art"]
      readMode            : sequential
      wrapFiles           : true
      mu2e: {
        protonBunchIntensityTag: "PBISim:"
        simStageEfficiencyTags: [] # this will not be filled in because otherwise it will try to access the database
        meanEventsPerPOTFactors : [@local::MixSTMEvents.meanEventsPerPOTFactors.MuBeamCat] # Number of POTs per event in STMDet
        writeEventIDs : false
        MaxEventsToSkip: 0
        debugLevel : 10
        products: {
          stepPointMCMixer: { mixingMap: [ [ "compressSTMDet:STMDet", ":" ] ] }
        }
      }
    }
  }
  analyzers : {
    CountMixed : {
        module_type : CountMixedEvents
        stepPointMCsTag : "STMStepMixer:STMDet"
    }
  }
  mix_path : [PBISim, STMStepMixer]
  trigger_paths : [mix_path]
  output_path : [CountMixed, compressedOutput]
  end_paths : [output_path]
}

outputs : {
  compressedOutput : {
    module_type : RootOutput
    fileName : "/pnfs/mu2e/resilient/users/plesniak/Analysis/MuMix.art" #@nil
  }
}

services.SeedService.baseSeed : 1
