#!/usr/bin/env python
#
# Script to build the files found in this directory.
#
# Original author Rob Kutschke.
#

import os
Import('env')
Import('mu2e_helper')

helper=mu2e_helper(env);

# Libraries need
common = [ 'mu2e_SeedService_SeedService_service',
           'mu2e_DataProducts',
           'mu2e_MCDataProducts',
           'mu2e_RecoDataProducts',
           'mu2e_ConfigTools',
           'mu2e_GeneralUtilities',
           'art_Framework_Core',
           'art_Framework_IO_Sources',
           'art_Framework_Principal',
           'art_Persistency_Common',
           'art_Persistency_Provenance',
           'art_Framework_Services_Registry',
           'art_root_io_tfile_support',
           'art_Utilities',
           'canvas',
           'MF_MessageLogger',
           'fhiclcpp',
           'cetlib',
           'cetlib_except',
           'CLHEP',
           'Core',
           'boost_filesystem',
           'boost_system',
    ]

services = [ 'BarService_service.cc',
             'Bug01Service_service.cc',
             'FooService_service.cc',
             'XBarService_service.cc'
             ]

mainlib = helper.make_mainlib ( [ 'MF_MessageLogger',
                                ] )

# Each service requires a custom link list so make them one at a time.
helper.make_plugin( 'FooService_service.cc',
                    [ mainlib,
                      'art_Framework_Principal',
                      'art_Persistency_Provenance',
                      'art_Framework_Services_Registry',
                      'canvas',
                      'fhiclcpp',
                      'boost_filesystem',
                      'boost_system',
                      'Core'
                      ],
                    )

helper.make_plugin( 'BarService_service.cc',
                    [ mainlib,
                      'mu2e_Sandbox_FooService_service',
                      'art_Framework_Principal',
                      'art_Persistency_Provenance',
                      'art_Framework_Services_Registry',
                      'art_Utilities',
                      'canvas',
                      'fhiclcpp',
                      'cetlib',
                      'cetlib_except',
                      'boost_filesystem',
                      'boost_system',
                      'Core'
                      ],
                    )

helper.make_plugin( 'XBarService_service.cc',
                    [ mainlib,
                      'mu2e_Sandbox_FooService_service',
                      'art_Framework_Principal',
                      'art_Persistency_Provenance',
                      'art_Framework_Services_Registry',
                      'art_Utilities',
                      'canvas',
                      'fhiclcpp',
                      'cetlib',
                      'cetlib_except',
                      'boost_filesystem',
                      'boost_system',
                      'Core'
                      ],
                    )


helper.make_plugin( 'Bug01Service_service.cc',
                    [ mainlib,
                      'mu2e_ConfigTools',
                      'art_Framework_Principal',
                      'art_Persistency_Provenance',
                      'art_Framework_Services_Registry',
                      'canvas',
                      'fhiclcpp',
                      'cetlib',
                      'cetlib_except',
                      'boost_filesystem',
                      'boost_system',
                      'Core'
                      ],
                    )

# Make all of the _module plugins; do not build any of the
# services, which have been built already.
# Fix me: we need to learn how wasteful it is to have a single
# mother-of-all-link-lists rather than custom lists for each module.
helper.make_plugins( [ mainlib,
                       'mu2e_Sandbox_FooService_service',
                       'mu2e_Sandbox_BarService_service',
                       'mu2e_Sandbox_XBarService_service',
                       'mu2e_Sandbox_Bug01Service_service',
                       'mu2e_SeedService_SeedService_service',
                       'mu2e_DataProducts',
                       'mu2e_MCDataProducts',
                       'mu2e_RecoDataProducts',
                       'mu2e_ConfigTools',
                       'mu2e_GeneralUtilities',
                       'art_Framework_Core',
                       'art_Framework_IO_Sources',
                       'art_Framework_Principal',
                       'art_Persistency_Common',
                       'art_Persistency_Provenance',
                       'art_Framework_Services_Registry',
                       'art_root_io_tfile_support',
                       'art_Framework_Services_Optional_RandomNumberGenerator_service',
                       'art_Utilities',
                       'canvas',
                       'MF_MessageLogger',
                       'fhiclcpp',
                       'cetlib',
                       'cetlib_except',
                       'CLHEP',
                       'Core',
                       'boost_filesystem',
                       'boost_system',
                       'tbb',
                       'hep_concurrency'
                     ],
                     services,
                     )

helper.make_dict_and_map( [ mainlib,
                           'mu2e_DataProducts',
                           'mu2e_GeneralUtilities',
                           'art_Persistency_Common',
                           'art_Utilities',
                           'canvas',
                           'cetlib',
                           'cetlib_except',
                           'Core'
                            ] )

# This tells emacs to view this file in python mode.
# Local Variables:
# mode:python
# End:
