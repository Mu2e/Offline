#
# Standard configurations for the message service.
#
#
# Usage - in a fcl configuration file:
#
# 1 - Place the following near the start, among the PROLOGs:
#     #include "Offline/fcl/messageService.fcl"
#
# 2 - Choose the appropriate style of logging, and in the services section of
#     your fcl file, place one of these four lines:
#     message : @local::mf_production
#     message : @local::mf_batch
#     message : @local::mf_interactive
#     message : @local::mf_debugging
#
# 3 - Customizations starting from these standard configurations are
#     straightforward to make; see customizingMessageFacilityFcl.txt
#     for simple examples.

#include "Offline/fcl/standardMessageDestinations.fcl"

BEGIN_PROLOG

# Four standardized (but customizable) styles of logging
# ------------------------------------------------------

# production -- intended for routine running on a farm or grid, with very
#               minimal logging (only real ERROR messages).
mf_production :
{
  destinations :
  {
    log:      @local::mf_error     # a destination which will react only to
                                   # messages of ERROR severity (that is,
                                   # messages issued via LogError,
                                   # LogProblem, or LogImportant).
    statistics :   { stats: @local::mf_errorStats }
  }
}

# This one is similar to mf_production, but it does not create files.
# Error messages go to cerr instead.  Also there is no statistics.
mf_errorsOnly :
{
    destinations : {
        log: {
            type: cerr
            threshold: ERROR
        }
      statistics :   { stats: @local::mf_null }
    }
}


# batch -- intended for near-production monitored running, with info messages
#          ignored, but with WARNING and ERROR messages output to the log.
mf_batch :
{
  destinations :
  {
    log:      @local::mf_warning   # a destination which will react only to
                                   # messages of ERROR or WARNING severity
                                   # (WARNING severity is LogWarning or
                                   # LogPrint).
    statistics :  { stats: @local::mf_warningStats }
  }
}

# interactive -- intended for developers running a job, sending the output
#                of all normal messages to cout.
mf_interactive :
{
  destinations :
  {
    log:      @local::mf_coutInfo  # a destination which will react to
                                   # messages of ERROR or WARNING or
                                   # INFO severity, but not DEBUG severity                                      # LogPrint).
                                   # (INFO severity is LogInfo or
                                   # LogVerbatim).
  }
}

# debugging -- intended for debugging one or more modules; every message
#              including those issued via LogDebug will be routed to debug.log.
mf_debugging :
{
  debugModules : ["*"]    # This "*" will result in LogDebug from all modules
                          # appearing in the log.
                          # Replace this with a list of individual module names
                          # if you only want output from some specific modules.
  suppressDebug : [ ]     # If debugModules remains "*", you can suppress
                          # one or more specific modules by replacing this
                          # list with a list of the modules to be suppressed.
  destinations :
  {
    log:      @local::mf_debug     # a destination which will react to all
                                   # messages, even those issued by
                                   # LogDebug or LogTrace.
    statistics :  { stats: @local::mf_debugStats }
  }
}

END_PROLOG
