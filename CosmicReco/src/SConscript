#!/usr/bin/env python
#
# Original author Rob Kutschke.
#

import os, re
Import('env')

Import('mu2e_helper')

helper=mu2e_helper(env)

rootlibs  = env['ROOTLIBS']
babarlibs = env['BABARLIBS']
extrarootlibs = ['Spectrum', 'TMVA' , 'Minuit' , 'XMLIO', 'Minuit2', 'Geom', 'Geom', 'GeomPainter', 'Ged']
mainlib = helper.make_mainlib ( [
    'mu2e_BTrkData',
    'mu2e_Mu2eBTrk',
    'mu2e_Mu2eUtilities',
    'mu2e_ConditionsService',
    'mu2e_GeometryService',
    'mu2e_CalorimeterGeom',
    'mu2e_BFieldGeom',
    'mu2e_TrackerGeom',
    'mu2e_TrackerConditions',
    'mu2e_MCDataProducts',
    'mu2e_RecoDataProducts',
    'mu2e_GlobalConstantsService',
    'mu2e_Mu2eInterfaces',
    'mu2e_DataProducts',
    'mu2e_GeneralUtilities',
    'mu2e_GeomPrimitives',
    babarlibs,
    'art_Framework_Core',
    'art_Framework_Principal',
    'art_Framework_Services_Registry',
    'art_root_io_TFileService_service',
    'art_root_io_tfile_support',
    'art_Persistency_Provenance',
    'art_Persistency_Common',
    'art_Utilities',
    'canvas',
    'fhiclcpp',
    'cetlib',
    'cetlib_except',
    rootlibs,
    'CLHEP',
    'HepPDT',
    'xerces-c',
    'boost_system',
    extrarootlibs,
    ] )

# Fixme: split into link lists for each module.
helper.make_plugins( [
   mainlib,
   'mu2e_Mu2eUtilities',
   'mu2e_SeedService_SeedService_service',
   'mu2e_ConditionsService',
   'mu2e_GeometryService',
   'mu2e_CalorimeterGeom',
   'mu2e_BFieldGeom',
   'mu2e_Mu2eHallGeom',
   'mu2e_TrackerGeom',
   'mu2e_TrackerConditions',
   'mu2e_MCDataProducts',
   'mu2e_RecoDataProducts',
   'mu2e_GlobalConstantsService',
   'mu2e_Mu2eInterfaces',
   'mu2e_DataProducts',
   'mu2e_GeneralUtilities',
   'mu2e_TrkReco',
   'mu2e_GeomPrimitives',
   babarlibs,
   'art_Framework_Core',
   'art_Framework_Principal',
   'art_Framework_Services_Registry',
   'art_root_io_tfile_support',
   'art_root_io_TFileService_service',
   'art_Framework_Services_Optional_RandomNumberGenerator_service',
   'art_Persistency_Common',
   'art_Persistency_Provenance',
   'art_Utilities',
   'canvas',
   'MF_MessageLogger',
   'fhiclcpp',
   'cetlib',
   'cetlib_except',
   'CLHEP',
   'HepPDT',
   rootlibs,
   'xerces-c',
   'boost_filesystem',
   'boost_system',
   'pthread',
   extrarootlibs

    ] )

# Fixme: do I need all of babarlibs below?
helper.make_dict_and_map( [
        mainlib,
        babarlibs,
        'art_Persistency_Common',
        'art_Utilities',
        'canvas',
        'cetlib',
        'cetlib_except',
        'CLHEP',
        'Core',
        'boost_system'
    ] )


# This tells emacs to view this file in python mode.
# Local Variables:
# mode:python
# End:
