# -*- mode: tcl -*-
#------------------------------------------------------------------------------
# this file includes all the prolog needed to run the reconstruction
# at the trigger level and the filters used to make the trigger decision
#------------------------------------------------------------------------------
#include "Offline/Mu2eKinKal/fcl/prolog_trigger.fcl"
#include "Offline/TrkReco/fcl/prolog_trigger.fcl"
#include "Offline/TrkPatRec/fcl/prolog_trigger.fcl"
#include "Offline/CalPatRec/fcl/prolog.fcl"
#include "Offline/CalPatRec/fcl/prolog_trigger.fcl"
#include "Offline/CaloReco/fcl/prolog_trigger.fcl"
#include "Offline/CaloCluster/fcl/prolog_trigger.fcl"
#include "Offline/TrkHitReco/fcl/prolog_trigger.fcl"
#include "Offline/TrkFilters/fcl/prolog_trigger.fcl"
#include "Offline/Compression/fcl/prolog.fcl"
#include "Offline/CosmicReco/fcl/prolog.fcl"
#include "Offline/CosmicReco/fcl/prolog_trigger.fcl"
#include "Offline/CaloFilters/fcl/prolog_trigger.fcl"

BEGIN_PROLOG
Trigger : {
    producers : {
        @table::CaloFilters.producers
        @table::CaloHitRecoTrigger.producers
        @table::CaloClusterTrigger.producers
        @table::TrkHitRecoTrigger.producers
        @table::TrkHitReco.producers
        @table::TrkRecoTrigger.producers
        @table::TTMu2eKinKal.producers
        @table::CosmicTracking.producers
        @table::CstTrigger.producers
        @table::TprTrigger.producers
        @table::CprTrigger.producers
    }

    filters : {
        @table::CprTrigger.filters
        @table::CaloFilters.filters
        @table::TrkFilters.filters
        @table::CstTrigger.filters

        #used to select 1 event out of N
        unbiasedEventPrescale : {
            module_type : PrescaleEvent
            nPrescale         : 10000
            triggerPath        : "unbiased"
            triggerFlag       : ["PrescaleGoodEvents"]
        }

        #prescaler for the standard strawDigi occupancy filter
        minBiasSDCountEventPrescale : {
            module_type : PrescaleEvent
            nPrescale         : 10000
            triggerPath        : "minBiasStrawDigiCount"
            triggerFlag   : ["PrescaleRandom"]
        }

        #prescaler for the strawDigi large-occupancy filter
        largeSDCountEventPrescale : {
            module_type : PrescaleEvent
            nPrescale         : 10000
            triggerPath        : "largeStrawDigiCount"
            triggerFlag   : ["PrescaleRandom"]
        }

        #filters based on the strawDigi occupancy:

        # LargeSDCountFilter: we need this filter to select strange events
        #                     where we had lot of hits. That is a good handle
        #                     for spotting strange behaviour of the tracker
        largeSDCountFilter     : {
            module_type : DigiFilter
            strawDigiCollection : makeSD
            caloDigiCollection  : notUsed
            useStrawDigi        : true
            useCaloDigi         : false
            triggerPath          : "largeStrawDigiCount"
            minNStrawDigi       : 10000
            maxNStrawDigi       : 1000000
            minNCaloDigi        : -1
            maxNCaloDigi        : -1
            maxCaloEnergy       : -1
        }

        # CDCountFilter     : it's a minimum bias filter. It allows to select
        #                     events based on the number of strawDigi
        minBiasSDCountFilter          : {
            module_type : DigiFilter
            strawDigiCollection : makeSD
            caloDigiCollection  : notUSed
            useStrawDigi        : true
            useCaloDigi         : false
            triggerPath          : "minBiasStrawDigiCount"
            minNStrawDigi       : 500
            maxNStrawDigi       : 10000
            minNCaloDigi        : -1
            maxNCaloDigi        : -1
            maxCaloEnergy       : -1
        }

        #prescaler for the standard strawDigi occupancy filter
        minBiasCDCountEventPrescale : {
            module_type : PrescaleEvent
            nPrescale         : 10000
            triggerPath        : "minBiasCaloDigiCount"
            triggerFlag   : ["PrescaleRandom"]
        }

        #prescaler for the strawDigi large-occupancy filter
        largeCDCountEventPrescale : {
            module_type : PrescaleEvent
            nPrescale         : 10000
            triggerPath        : "largeCaloDigiCount"
            triggerFlag   : ["PrescaleRandom"]
        }

        #filters based on the strawDigi occupancy:

        # LargeCDCountFilter: we need this filter to select strange events
        #                     where we had lot of hits. That is a good handle
        #                     for spotting strange behaviour of the tracker
        largeCDCountFilter     : {
            module_type : DigiFilter
            strawDigiCollection : notUsed
            caloDigiCollection  : CaloDigiMaker
            useStrawDigi        : false
            useCaloDigi         : true
            triggerPath         : "largeCaloDigiCount"
            minNStrawDigi       : -1
            maxNStrawDigi       : -1
            minNCaloDigi        : 5000
            maxNCaloDigi        : 1000000
            maxCaloEnergy       : -1
        }

        # CDCountFilter     : it's a minimum bias filter. It allows to select
        #                     events based on the number of strawDigi
        minBiasCDCountFilter          : {
            module_type : DigiFilter
            strawDigiCollection : notUsed
            caloDigiCollection  : CaloDigiMaker
            useStrawDigi        : false
            useCaloDigi         : true
            triggerPath          : "minBiasCaloDigiCount"
            minNStrawDigi       : -1
            maxNStrawDigi       : -1
            minNCaloDigi        : 200
            maxNCaloDigi        : 5000
            maxCaloEnergy       : -1
        }
      }

    analyzers  : {
        ReadTriggerInfo : {
            module_type : ReadTriggerInfo
        }
    }

    paths : {
        #calorimeter based filters. It includes: CE, and calibrations
        @table::CaloFilters.sequences

        #tracking filters. It includes: TrkPatRec, CalPatRec
        @table::TrkFilters.sequences

        #straight track finder
        @table::CstTrigger.sequences

        #unbiased filter. It selects the events based on their event id
        unbiased           : [ unbiasedEventPrescale ]

        #minimum bias filters. So far, a filter based on the StrawDigi occupancy
        minBias_sdCount : [ minBiasSDCountEventPrescale, minBiasSDCountFilter]

        #filter to select events with large occupancy in the tracker
        largeSDCount       : [ largeSDCountEventPrescale, largeSDCountFilter]

        #minimum bias filters. So far, a filter based on the StrawDigi occupancy
        minBias_cdCount : [ minBiasCDCountEventPrescale, minBiasCDCountFilter]

        #filter to select events with large occupancy in the tracker
        largeCDCount       : [ largeCDCountEventPrescale, largeCDCountFilter]
    }

    outputs: {
        triggerOutput : {
            module_type: RootOutput
            fileName: "filteredOutput.root"
            SelectEvents : [
                            "tpr*",
                            "cpr*",
                            "calo*"
                           ]
#            Compressionlevel: 0
            # fileProperties : {
            #         maxEvents : 1000
                # maxSubRuns :
                # maxSize : # in Kib
                # maxAge : #in s
                # granularity : [Event | SubRun | Run | InputFile | Job] # default is Event
                # maxInputFiles : 1
            # }
            outputCommands: ["drop *_*_*_*",
                             "keep *_*_*_*" ]
        }

        rootoutUnbiased : {
            module_type: RootOutput
            fileName: "driver_unbiased.root"
            SelectEvents : [ unbiasedTrigger ]
            compressionLevel: 0

            outputCommands: ["drop *_*_*_*",
                             "keep *_*_*_*" ]
        }

        rootoutCaloOnly : {
            module_type: RootOutput
            fileName: "driver_calo_only.root"
            SelectEvents : [ caloOnlyTrigger ]
#            compressionLevel: 0

            outputCommands: ["drop *_*_*_*",
                             "keep *_*_*_*" ]
        }

        rootoutTrkDem : {
            module_type: RootOutput
            fileName: "driver_trk_dem.root"
            SelectEvents : [ tprDeMHighPStopTargTrigger, cprDeMHighPStopTargTrigger ]
            compressionLevel: 0

            outputCommands: ["drop *_*_*_*",
                             "keep *_*_*_*" ]
        }

        rootoutTrkDep : {
            module_type: RootOutput
            fileName: "driver_trk_dep.root"
            SelectEvents : [ tprDePTrigger, cprDePHighPStopTargTrigger ]
            compressionLevel: 0

            outputCommands: ["drop *_*_*_*",
                             "keep *_*_*_*" ]
        }


    }
    # sequence to create digis
    PrepareDigis: []
}
END_PROLOG
