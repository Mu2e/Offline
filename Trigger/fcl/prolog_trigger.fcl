# -*- mode: tcl -*-
#------------------------------------------------------------------------------
# this file includes all the prolog needed to run the reconstruction 
# at the trigger level and the filters used to make the trigger decision
#------------------------------------------------------------------------------
#include "Offline/TrkReco/fcl/prolog_trigger.fcl"
#include "Offline/TrkPatRec/fcl/prolog_trigger.fcl"
#include "Offline/CalPatRec/fcl/prolog.fcl"
#include "Offline/CalPatRec/fcl/prolog_trigger.fcl"
#include "Offline/CaloReco/fcl/prolog_trigger.fcl"
#include "Offline/CaloCluster/fcl/prolog_trigger.fcl"
#include "Offline/TrkHitReco/fcl/prolog_trigger.fcl"
#include "Offline/TrkFilters/fcl/prolog_trigger.fcl"
#include "Offline/CosmicReco/fcl/prolog.fcl"
#include "Offline/CosmicReco/fcl/prolog_trigger.fcl"
#include "Offline/CaloFilters/fcl/prolog_trigger.fcl"

BEGIN_PROLOG
Trigger : {
    producers : {
	@table::CaloFilters.producers
	@table::CaloHitReco_trigger.producers
	@table::CaloCluster_trigger.producers
	@table::TrkHitReco_trigger.producers
	@table::TrkHitReco.producers
	@table::TrkReco_trigger.producers
	@table::CosmicTracking.producers
	@table::Cst_trigger.producers
	@table::Tpr_trigger.producers
	@table::Cpr_trigger.producers
    }

    filters : {
	@table::Cpr_trigger.filters
	@table::CaloFilters.filters
	@table::TrkFilters.filters
	@table::Cst_trigger.filters

	#used to select 1 event out of N
	unbiased_eventPrescale : {
	    module_type : Prescale_event
	    nPrescale         : 10000 
	    triggerPath        : "unbiased"
	    triggerFlag       : ["PrescaleGood_events"]	    
	}

	#prescaler for the standard strawDigi occupancy filter
	minBias_sdCount_eventPrescale : {
	    module_type : Prescale_event
	    nPrescale         : 10000
	    triggerPath        : "minBiasStrawDigiCount"
	    triggerFlag   : ["PrescaleRandom"]	    
	}
	
	#prescaler for the strawDigi large-occupancy filter
	large_sdCount_eventPrescale : {
	    module_type : Prescale_event
	    nPrescale         : 10000
	    triggerPath        : "largeStrawDigiCount"
	    triggerFlag   : ["PrescaleRandom"]	    
	}
	
	#filters based on the strawDigi occupancy:

	# Large_sdCountFilter: we need this filter to select strange events 
	#                     where we had lot of hits. That is a good handle
	#                     for spotting strange behaviour of the tracker
	large_sdCountFilter     : {
	    module_type : DigiFilter
	    strawDigiCollection : makeSD
	    caloDigiCollection  : notUsed
	    useStrawDigi        : true
	    useCaloDigi         : false
	    triggerPath          : "largeStrawDigiCount"	    
	    minNStrawDigi       : 10000 
	    maxNStrawDigi       : 1000000 
	    minNCaloDigi        : -1
	    maxNCaloDigi        : -1
	    maxCaloEnergy       : -1
	}

	# _cdCountFilter     : it's a minimum bias filter. It allows to select
	#                     events based on the number of strawDigi
	minBias_sdCountFilter          : {
	    module_type : DigiFilter
	    strawDigiCollection : makeSD
	    caloDigiCollection  : notUSed		  
	    useStrawDigi        : true			  
	    useCaloDigi         : false			  
	    triggerPath          : "minBiasStrawDigiCount"	    
	    minNStrawDigi       : 500   		  
	    maxNStrawDigi       : 10000			  
	    minNCaloDigi        : -1			  
	    maxNCaloDigi        : -1			  
	    maxCaloEnergy       : -1                      
	}

	#prescaler for the standard strawDigi occupancy filter
	minimumbias_cdCount_eventPrescale : {
	    module_type : Prescale_event
	    nPrescale         : 10000
	    triggerPath        : "minBiasCaloDigiCount"	    	    
	    triggerFlag   : ["PrescaleRandom"]	    
	}
	
	#prescaler for the strawDigi large-occupancy filter
	large_cdCount_eventPrescale : {
	    module_type : Prescale_event
	    nPrescale         : 10000
	    triggerPath        : "largeCaloDigiCount"	    	    
	    triggerFlag   : ["PrescaleRandom"]	    
	}
	
	#filters based on the strawDigi occupancy:

	# Large_cdCountFilter: we need this filter to select strange events 
	#                     where we had lot of hits. That is a good handle
	#                     for spotting strange behaviour of the tracker
	large_cdCountFilter     : {
	    module_type : DigiFilter
	    strawDigiCollection : notUsed
	    caloDigiCollection  : CaloDigiMaker
	    useStrawDigi        : false
	    useCaloDigi         : true
	    triggerPath         : "largeCaloDigiCount"	    	    	    
	    minNStrawDigi       : -1
	    maxNStrawDigi       : -1 
	    minNCaloDigi        : 5000 	 
	    maxNCaloDigi        : 1000000
	    maxCaloEnergy       : -1
	}

	# _cdCountFilter     : it's a minimum bias filter. It allows to select
	#                     events based on the number of strawDigi
	minimumbias_cdCountFilter          : {
	    module_type : DigiFilter
	    strawDigiCollection : notUsed
	    caloDigiCollection  : CaloDigiMaker
	    useStrawDigi        : false
	    useCaloDigi         : true
	    triggerPath          : "minBiasCaloDigiCount"	    	    	    
	    minNStrawDigi       : -1    
	    maxNStrawDigi       : -1
	    minNCaloDigi        : 200
	    maxNCaloDigi        : 5000
	    maxCaloEnergy       : -1
	}
      }
    
    analyzers  : { 
	Read_triggerInfo : { 
	    module_type : Read_triggerInfo
	}
    }
    
    paths : {
	#calorimeter based filters. It includes: CE, and calibrations
	@table::CaloFilters.sequences
	
	#tracking filters. It includes: TrkPatRec, CalPatRec
	@table::TrkFilters.sequences

	#straight track finder
	@table::Cst_trigger.sequences

	#unbiased filter. It selects the events based on their event id
	unbiased           : [ unbiased_eventPrescale ]

	#minimum bias filters. So far, a filter based on the StrawDigi occupancy
	minBias_sdCount : [ minBias_sdCount_eventPrescale, minBias_sdCountFilter]

	#filter to select events with large occupancy in the tracker
	large_sdCount       : [ large_sdCount_eventPrescale, large_sdCountFilter]
	
	#minimum bias filters. So far, a filter based on the StrawDigi occupancy
	minimumbias_cdCount : [ minimumbias_cdCount_eventPrescale, minimumbias_cdCountFilter]

	#filter to select events with large occupancy in the tracker
	large_cdCount       : [ large_cdCount_eventPrescale, large_cdCountFilter]
    }
    
    outputs: {
	triggerOutput : { 
	    module_type: RootOutput
	    fileName: "filteredOutput.root"
	    Select_events : [ unbiased_trigger, 
			     minBias_sdCount_trigger,
			     large_sdCount_trigger,
			     caloMVACE_trigger,
			     tprDeM_highP_stopTarg_trigger, tprDeP_highP_stopTarg_trigger, cprDeM_highP_stopTarg_trigger, cprDeP_highP_stopTarg_trigger ]
#	    Compressionlevel: 0
	    # fileProperties : {
	    # 	max_events : 1000
		# maxSubRuns : 
		# maxSize : # in Kib
		# maxAge : #in s
		# granularity : [_event | SubRun | Run | InputFile | Job] # default is _event 
		# maxInputFiles : 1 
	    # }
	    outputCommands: ["drop *_*_*_*",
			     "keep *_*_*_*" ]
	}

	rootoutUnbiased : { 
	    module_type: RootOutput
	    fileName: "driver_unbiased.root"
	    Select_events : [ unbiased_trigger ]
	    compressionLevel: 0
	    
	    outputCommands: ["drop *_*_*_*",
			     "keep *_*_*_*" ]
	}
	
	rootoutCaloOnly : {
	    module_type: RootOutput
	    fileName: "driver_calo_only.root"
	    Select_events : [ caloOnly_trigger ]
#	    compressionLevel: 0
	    
	    outputCommands: ["drop *_*_*_*",
			     "keep *_*_*_*" ]
	}

	rootoutTrkDem : {
	    module_type: RootOutput
	    fileName: "driver_trk_dem.root"
	    Select_events : [ tprDeM_highP_stopTarg_trigger, cprDeM_highP_stopTarg_trigger ]
	    compressionLevel: 0
	    
	    outputCommands: ["drop *_*_*_*",
			     "keep *_*_*_*" ]
	}

	rootoutTrkDep : {
	    module_type: RootOutput
	    fileName: "driver_trk_dep.root"
	    Select_events : [ tprDeP_trigger, cprDeP_highP_stopTarg_trigger ]
	    compressionLevel: 0
	    
	    outputCommands: ["drop *_*_*_*",
			     "keep *_*_*_*" ]
	}
	

    }
    # sequence to create digis
    PrepareDigis: [] 
}
END_PROLOG
