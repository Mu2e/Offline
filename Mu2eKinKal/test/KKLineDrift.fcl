# Minimal KinKal job that fits digis to a Kinematic Line using drift information, and analyzes the output with TrkAna
# To create a functional job you must add database purpose and version; ie create a fcl stub that #includes this file and
# adds (for instance):
# services.DbService.purpose: MDC2020_perfect
# services.DbService.version: v1_0
#
#include "Offline/fcl/minimalMessageService.fcl"
#include "Offline/fcl/standardServices.fcl"
#include "Production/JobConfig/reco/prolog.fcl"
#include "Offline/Mu2eKinKal/fcl/prolog.fcl"
#include "Offline/CosmicReco/fcl/prolog.fcl"
#include "TrkAna/fcl/prolog.fcl"

process_name: KKDrift
source : { module_type : RootInput }
services : @local::Services.Reco
physics :
{
  producers : {
    @table::TrkHitReco.producers
    @table::Tracking.producers
    @table::CalPatRec.producers
    @table::CaloReco.producers
    @table::CaloCluster.producers
    @table::CaloMC.TruthProducers
    @table::CrvResponsePackage.producers
    @table::Reconstruction.producers
    @table::TrkAnaReco.producers
    @table::CosmicTracking.producers
    KKLine : @local::Reconstruction.producers.KKLine
    @table::CosmicTracking.producers
  }
  filters : {
    RecoFilter : {
      module_type   : RecoMomFilter
      KalFinalTagRoot : ""
      TrkTags : [ "KKLine" ]
      MomentumCutoff: [ 60 ]
   }
  }
  RecoPath : [
    @sequence::Reconstruction.LineRecoMCPath ]
  analyzers : {
    TAKK : {
      @table::TrkAnaTreeMaker
      candidate : {
        branch : "kl"
        input : "KK"
        suffix : "Line"
        options : {
          fillMC : true
          fillHits : true
          fillTrkQual : false
          fillTrkPID : false
          genealogyDepth : 5
        }
      }
      diagLevel : 2
      FillMCInfo : true
      FillCRVHits : true

      FillTrkQualInfo : false
      FillTrkPIDInfo : false
      FillHitInfo : true
      FillTriggerInfo : false
      supplements : [ ]
      FitType : "KinematicLine"
    }

    evtprint : {
      module_type : RunSubrunEvent
      printSam    : false
      printRun    : false
      printSubrun : false
      printEvent  : true
    }
  }
  EndPath : [TAKK]
}

#include "Production/JobConfig/reco/epilog.fcl"
#include "Offline/CRVResponse/fcl/epilog_extracted.fcl"

# no need for Lorentz effects
services.ProditionsService.strawResponse.driftIgnorePhi: true

services.GeometryService.inputFile: "Offline/Mu2eG4/geom/geom_common_extracted.txt"
services.GeometryService.bFieldFile: "Offline/Mu2eG4/geom/bfgeom_no_field.txt"

physics.producers.KKLine.ModuleSettings.SaveAllFits : true
physics.producers.SelectRecoMC.HelixSeedCollections: []
physics.producers.SelectRecoMC.KalSeedCollections: [ "KKLine" ]

physics.producers.CaloHitTruthMatch.primaryParticle : "compressDigiMCs"
physics.producers.CaloHitTruthMatch.caloShowerSimCollection : "compressDigiMCs"

physics.end_paths : [ EndPath ] # needed for generate_fcl
services.TimeTracker.printSummary: true
services.TFileService.fileName: "nts.owner.KKDrift.version.sequence.root"
