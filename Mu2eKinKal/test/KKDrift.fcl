# Minimal KinKal job that fits digis to a downstream electron using drift information, and analyzes the output with TrkAna
# To create a functional job you must add database purpose and version; ie create a fcl stub that #includes this file and
# adds (for instance):
# services.DbService.purpose: MDC2020_perfect
# services.DbService.version: v1_0
#
# To convert the fit to use CentralHelix instead of LoopHelix, add the following line to the stub:
# physics.producers.KKDeM.module_type : CentralHelixFit

#include "Offline/fcl/minimalMessageService.fcl"
#include "Offline/fcl/standardServices.fcl"
#include "Production/JobConfig/reco/prolog.fcl"
#include "Offline/Mu2eKinKal/fcl/prolog.fcl"
#include "TrkAna/fcl/prolog.fcl"

process_name: KKDrift
source : { module_type : RootInput }
services : @local::Services.Reco
physics :
{
  producers : {
    @table::TrkHitReco.producers
    @table::Tracking.producers
    @table::CalPatRec.producers
    @table::CaloReco.producers
    @table::CaloCluster.producers
    @table::CaloMC.TruthProducers
    @table::CrvResponsePackage.producers
    @table::Reconstruction.producers
    @table::TrkAnaReco.producers
    @table::Mu2eKinKal.producers
  }
  filters : {
    @table::CalPatRec.filters
  }
  RecoPath : [
    @sequence::Reconstruction.CaloReco,
    @sequence::Reconstruction.TrkReco,
    @sequence::Reconstruction.CrvReco,
    TimeClusterFinderDe, HelixFinderDe,
    CalTimePeakFinder, CalHelixFinderDe,
    CalTimePeakFinderMu, CalHelixFinderDmu,
    MHDeM,
    KKDeM,
    @sequence::Reconstruction.MCReco
  ]
  analyzers : {
    TrkAna : {
      @table::TrkAnaTreeMaker
      FitType : LoopHelix
      diagLevel : 2
      FillMCInfo : true
      FillTrkPIDInfo : false
      FillHitInfo : true
      FillTriggerInfo : false
      branches :  [
        { input: "KK"
          branch : "trk"
          suffix : "DeM"
          options : { fillMC : true   genealogyDepth : -1 }
        }
      ]
    }
    evtprint : {
      module_type : RunSubrunEvent
      printSam    : false
      printRun    : false
      printSubrun : false
      printEvent  : true
    }
  }
  EndPath : [TrkAna]
}
outputs : {
  Output : {
    @table::Reconstruction.Output
    SelectEvents : [ "RecoPath" ]
  }
}

#include "Production/JobConfig/reco/epilog.fcl"

physics.producers.CaloHitTruthMatch.primaryParticle : "compressDigiMCs"
physics.producers.CaloHitTruthMatch.caloShowerSimCollection : "compressDigiMCs"
physics.producers.SelectRecoMC.KalSeedCollections  : ["KKDeM"]
physics.producers.SelectRecoMC.HelixSeedCollections  : ["MHDeM"]
physics.producers.SelectRecoMC.debugLevel : 0

physics.producers.KKDeM.ModuleSettings.HelixSeedCollections : [ "MHDeM" ]
physics.producers.KKDeM.ModuleSettings.ComboHitCollection : "makeSH"
physics.producers.KKDeM.ModuleSettings.CaloClusterCollection : "CaloClusterMaker"
physics.producers.KKDeM.ModuleSettings.PrintLevel : 0
physics.producers.KKDeM.ModuleSettings.SaveAllFits : false
physics.producers.KKDeM.FitSettings.PrintLevel : 0

physics.analyzers.TrkAna.ExtraMCStepCollectionTags : [ "compressDigiMCs:protonabsorber", "compressDigiMCs:stoppingtarget" ]
physics.end_paths : [ EndPath ] # needed for generate_fcl
services.TimeTracker.printSummary: true
services.TFileService.fileName: "nts.owner.KKDrift.version.sequence.root"
