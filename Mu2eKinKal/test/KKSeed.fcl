# Minimal KinKal job that fits digis to a downstream electron as a seed fit , and analyzes the output with TrkAna
# To create a functional job you must add database purpose and version; ie create a fcl stub that #includes this file and
# adds (for instance):
# services.DbService.purpose: MDC2020_perfect
# services.DbService.version: v1_0
#
# To convert the fit to use CentralHelix instead of LoopHelix, add the following line to the stub:
# physics.producers.KKDeMDriftFit.module_type : CentralHelixFit

#include "Offline/fcl/minimalMessageService.fcl"
#include "Offline/fcl/standardServices.fcl"
#include "Production/JobConfig/reco/prolog.fcl"
#include "Offline/Mu2eKinKal/fcl/prolog.fcl"
#include "TrkAna/fcl/prolog.fcl"

process_name: KKSeed
source : { module_type : RootInput }
services : @local::Services.Reco
physics :
{
  producers : {
    @table::TrkHitReco.producers
    @table::Tracking.producers
    @table::CalPatRec.producers
    @table::CaloReco.producers
    @table::CaloCluster.producers
    @table::CaloMC.TruthProducers
    @table::CrvResponsePackage.producers
    @table::Reconstruction.producers
    @table::TrkAnaReco.producers
    @table::Mu2eKinKal.producers
  }
  filters : {
    @table::CalPatRec.filters
  }
  RecoPath : [
    @sequence::Reconstruction.CaloReco,
    @sequence::Reconstruction.TrkReco,
    @sequence::Reconstruction.CrvReco,
    TimeClusterFinderDe, HelixFinderDe,
    CalTimePeakFinder, CalHelixFinderDe,
    MHDeM,
    KKDeMSeedFit,
    @sequence::Reconstruction.MCReco
  ]
  analyzers : {
    TAKK : {
      @table::TrkAnaReco.analyzers.TrkAnaNeg
      FitType : LoopHelix
    }
    evtprint : {
      module_type : RunSubrunEvent
      printSam    : false
      printRun    : false
      printSubrun : false
      printEvent  : true
    }
  }
  EndPath : [TAKK]
}
outputs : {
  Output : {
    @table::Reconstruction.Output
    SelectEvents : [ "RecoPath" ]
  }
}

#include "Production/JobConfig/reco/epilog.fcl"
physics.producers.CaloHitTruthMatch.primaryParticle : "compressDigiMCs"
physics.producers.CaloHitTruthMatch.caloShowerSimCollection : "compressDigiMCs"
physics.producers.SelectRecoMC.KalSeedCollections  : ["KKDeMSeedFit"]
physics.producers.SelectRecoMC.HelixSeedCollections  : ["MHDeM"]
physics.producers.SelectRecoMC.debugLevel : 0

physics.producers.KKDeMSeedFit.ModuleSettings.HelixSeedCollections : [ "MHDeM" ]
physics.producers.KKDeMSeedFit.ModuleSettings.ComboHitCollection : "makeSH"
physics.producers.KKDeMSeedFit.ModuleSettings.CaloClusterCollection : "CaloClusterMaker"
physics.producers.KKDeMSeedFit.ModuleSettings.PrintLevel : 0
physics.producers.KKDeMSeedFit.ModuleSettings.SaveAllFits : true

physics.analyzers.TAKK.candidate.options : @local::AllOpt
physics.analyzers.TAKK.diagLevel : 2
physics.analyzers.TAKK.FillCRVHits : false
physics.analyzers.TAKK.FillMCInfo : true
physics.analyzers.TAKK.FillTriggerInfo : true
physics.analyzers.TAKK.FillTrkQualInfo : false
physics.analyzers.TAKK.FillTrkPIDInfo : false
physics.analyzers.TAKK.FillHitInfo : true
physics.analyzers.TAKK.FillTriggerInfo : false
physics.analyzers.TAKK.candidate.input : "KK"
physics.analyzers.TAKK.candidate.suffix : "DeMSeedFit"
physics.analyzers.TAKK.candidate.options.fillHits : true
physics.analyzers.TAKK.supplements : []

physics.end_paths : [ EndPath ] # needed for generate_fcl
services.TimeTracker.printSummary: true
services.TFileService.fileName: "nts.owner.KKSeed.version.sequence.root"
