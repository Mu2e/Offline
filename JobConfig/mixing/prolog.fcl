# mixing is a special case of digitization, this file just configures the
# aspects unique to mixing
#  Below are the options for mixing (these are hard to find!)
#     sequential -- read the secondary events in order
#     randomReplace -- random with replacement
#     randomLimReplace -- events unique within a primary event
#     randomNoReplace -- events guaranteed to be used once only.
#include "CommonMC/fcl/prolog.fcl"
#include "TrackerMC/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"

BEGIN_PROLOG

# mixing configuration
Mixing : {
  EventsPerMustop : 0.0194018666666667
  filters : {
# target stop muon mixer
    mustopMixer: {
      module_type         : MixBackgroundFrames
      fileNames           : @nil
      readMode            : sequential
      wrapFiles           : true
      mu2e: {
        protonBunchIntensityTag: "PBISim"
	meanEventsPerProton: @nil
	simStageEfficiencyTags: @nil
	products: @nil
	skipFactor : 1 # temporary; Should generate_fcl set this?  Is it a factor or an offset?
	products: {
	  genParticleMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
	  simParticleMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
	  strawGasStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
	  caloShowerStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
	  crvStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        }
      }
    }
  }
  # input time maps from cut flash 
  flashTimeMaps : [ "flashMixer:protonTimeMap"]
# sequences: add flash and OOT mixers TODO
  TriggerSequence : [
    PBISim,
    mustopMixer
  ]
}
# override the Trigger sequence to prepare digis; the mixers must preceed the digi making
Trigger.PrepareDigis: [ @sequence::Mixing.TriggerSequence, @sequence::CommonMC.DigiSim, @sequence::TrackerMC.DigiSim, @sequence::CaloMC.DigiSim ]
# override the proton bunch intensity
Digitize.producers.PBISim : {  
  module_type: ProtonBunchIntensityLogNormal
  sigma: 0.3814
  extendedMean: 3.9e7 // mean of the uncut distribution
  cutMax: 11.7e7  // cut the tail at 3 times the mean
}

END_PROLOG
