#
#  Prolog for production reconstruction jobs
#
#include "CommonMC/fcl/prolog.fcl"
#include "TrkHitReco/fcl/prolog.fcl"
#include "TrkReco/fcl/prolog.fcl"
#include "TrkPatRec/fcl/prolog.fcl"
#include "CaloReco/fcl/prolog.fcl"
#include "CaloCluster/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "CalPatRec/fcl/prolog.fcl"
#include "Filters/fcl/prolog.fcl"
#
BEGIN_PROLOG
Reconstruction : {
  producers : {
    @table::TrkHitReco.producers
    @table::Tracking.producers
    @table::CalPatRec.producers
    @table::CaloReco.producers
    @table::CaloCluster.producers
    @table::CaloMC.producers
    @table::CaloClusterMC.producers
    @table::CrvResponsePackage.producers

# instantiate explicit helix merger modules
# NB: positive here refers to helicity, not charge!
    MHDeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderDe:Positive", "CalHelixFinderDe:Positive" ]
    }
    MHDeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderDe:Negative", "CalHelixFinderDe:Negative" ]
    }
    MHDmuM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderDmu:Positive" , "CalHelixFinderDmu:Positive" ]
    }
    MHDmuP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderDmu:Negative", "CalHelixFinderDmu:Negative" ]
    }
    # run helix merging on upstream, even though there is only one input collection,
    # as the merging also suppresses duplicates
    MHUeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderUe:Negative" ]
    }
    MHUeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderUe:Positive" ]
    }
    MHUmuM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderUmu:Negative" ]
    }
    MHUmuP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders : [ "HelixFinderUmu:Positive" ]
    }
    KSFDeM : {
      @table::Tracking.producers.KSFDeM
      SeedCollection             : MHDeM
    }
    KSFDeP : {
      @table::Tracking.producers.KSFDeP
      SeedCollection             : MHDeP
    }
    KSFDmuM : {
      @table::Tracking.producers.KSFDmuM
      SeedCollection             : MHDmuM
    }
    KSFDmuP : {
      @table::Tracking.producers.KSFDmuP
      SeedCollection             : MHDmuP
    }
    KSFUeM : {
      @table::Tracking.producers.KSFUeM
      SeedCollection             : MHUeM
    }
    KSFUeP : {
      @table::Tracking.producers.KSFUeP
      SeedCollection             : MHUeP
    }
    KSFUmuM : {
      @table::Tracking.producers.KSFUmuM
      SeedCollection             : MHUmuM
    }
    KSFUmuP : {
      @table::Tracking.producers.KSFUmuP
      SeedCollection             : MHUmuP
    }
    # Implicit TrkPatRec config for Final Fits and upstream fits (no merging)
    #
    # Prune output so that only parts related to reconstructed objects are kept
    #
    SelectRecoMC : { 
       @table::CommonMC.SelectRecoMC 
       CSSCollection : "compressDigiMCs"
       CaloClusterMCDTime : 2.0
       CaloMinE : 1.0
       SaveEnergySteps : false
       SaveUnusedDigiMCs : true
       SaveAllUnusedDigiMCs : false
       TimeOffsets : [ @sequence::DigiCompression.TimeMaps ]
       PrimaryParticle : "compressDigiMCs"
       StrawDigiCollection : "makeSD"
       StrawHitFlagCollection : "FlagBkgHits:StrawHits" 
       ComboHitCollection : "makeSH" 
       CaloDigiCollection : "CaloDigiMaker"
       CrvDigiCollection : "CrvDigi"
       CaloClusterCollection : "CaloClusterMaker"
       CrvCoincidenceClusterCollection : "CrvCoincidenceClusterFinder"
       StrawDigiMCCollection : "compressDigiMCs"
       CrvDigiMCCollection : "compressDigiMCs"
       EventWindowMarker : "EWMProducer"
       ProtonBunchTimeMC : "EWMProducer"
       ProtonBunchIntensity : "protonBunchIntensity"
       KFFInstances  : ["KFFDeM", "KFFDeP", "KFFDmuM", "KFFDmuP",
		     "KFFUeM", "KFFUeP", "KFFUmuM", "KFFUmuP" ]
       MHInstances  : ["MHDeM", "MHDeP", "MHDmuM", "MHDmuP",
		     "MHUeM", "MHUeP", "MHUmuM", "MHUmuP" ]
      VDSPCollection : "compressDigiMCs:virtualdetector"
    }
    # Compresion
    compressRecoMCs : { @table::DigiCompression.Reco
      strawDigiMCTag : "compressDigiMCs"
      crvDigiMCTag : "compressDigiMCs"
      simParticleTags : [ "compressDigiMCs" ]
      extraStepPointMCTags : [ "compressDigiMCs:virtualdetector", "compressDigiMCs:protonabsorber" ]
      timeMapTags : [ @sequence::DigiCompression.TimeMaps ]
      caloClusterMCTag : "SelectRecoMC"
      strawDigiMCIndexMapTag : "SelectRecoMC:StrawDigiMap"
      crvDigiMCIndexMapTag : "SelectRecoMC:CrvDigiMap"
      keepAllGenParticles : false
      crvCoincClusterMCTag : "CrvCoincidenceClusterMatchMC"
      primaryParticleTag : "compressDigiMCs"
      rekeySimParticleCollection : false
    }
  }
  
  filters : {
# why are CalPatRec reconstruction modules implemented as filters????
# They should be remade as producers FIXME!
    @table::CalPatRec.filters
    # reco filter
    RecoFilter : {
      module_type   : RecoMomFilter
      KalFinalTagRoot : ""
      TrkTags : [ "KFFDeM", "KFFDeP", 
	          "KFFUeM", "KFFUeP", 
		  "KFFDmuM", "KFFDmuP", 
	          "KFFUmuM", "KFFUmuP"
		]
		# // set low cutoffs
      MomentumCutoff : [ 60.0, 60.0,
			 60.0, 60.0,
			 60.0, 60.0,
			 60.0, 60.0 ]
    }
  }

  analyzers : { # these are specific to MC
    RecoCheck : { 
      @table::DigiCompression.RecoCheck
      oldStrawDigiMCTag : "compressDigiMCs"
      newStrawDigiMCTag : "compressRecoMCs"
      OldTimeOffsets : { inputs : [ @sequence::DigiCompression.TimeMaps ] }
      NewTimeOffsets : { inputs : [ @sequence::RecoCompression.TimeMaps ] }
      strawDigiMCIndexMapTag : "SelectRecoMC:StrawDigiMap"
      oldCrvDigiMCTag : "compressDigiMCs"
      newCrvDigiMCTag : "compressRecoMCs"
      crvDigiMCIndexMapTag : "SelectRecoMC:CrvDigiMap"
      oldCaloShowerSimTag : "CaloFix"
      newCaloShowerSimTag : "compressRecoMCs"
      checkTrackerDuplicateSteps : false
    }
  }
# reconstruct multiple types of tracks.  These are separate sequences to allow granular execution
# Downstream electron sequence (plus and minus), using merged helices
  DeReco : [
    TimeClusterFinderDe, HelixFinderDe,  # TrkPatRec
    CalTimePeakFinder, CalHelixFinderDe,  # CalPatRec
    MHDeM, MHDeP, # helix merging
    KSFDeM, KSFDeP, # Seed fit (chisquared, no drift)
    KFFDeM, KFFDeP # final Kalman filter fit
  ]
# Upstream electron sequence (plus and minus): TrkPatRec only
  UeReco : [
    TimeClusterFinderUe, HelixFinderUe,   
    MHUeM, MHUeP, # helix merging
    KSFUeM, KSFUeP, # Seed fit (chisquared, no drift)
    KFFUeM, KFFUeP # final Kalman filter fit
  ]
# Downstream muon sequence (plus and minus)
  DmuReco : [
    TimeClusterFinderDmu, HelixFinderDmu,  # TrkPatRec
    CalTimePeakFinderMu, CalHelixFinderDmu,  # CalPatRec
    MHDmuM, MHDmuP, # helix merging
    KSFDmuM, KSFDmuP, # Seed fit (chisquared, no drift)
    KFFDmuM, KFFDmuP # final Kalman filter fit
  ]
# Upstream muon sequence (plus and minus)
  UmuReco : [
    TimeClusterFinderUmu, HelixFinderUmu,   
    MHUmuM, MHUmuP, # helix merging
    KSFUmuM, KSFUmuP, # Seed fit (chisquared, no drift)
    KFFUmuM, KFFUmuP # final Kalman filter fit
  ]
# add protons for calibration TODO!

# Track reco sequence
  TrkReco : [  @sequence::TrkHitReco.PrepareHits ] # Track hit
# Calo reco
  CaloReco : [ @sequence::CaloReco.Reco, @sequence::CaloCluster.Reco ]
# CRV reco 
  CrvReco : [ CrvRecoPulses, CrvCoincidence, CrvCoincidenceClusterFinder ]
# full MC sequence; form the Calo and CRV matching, and compress based on reco content
  MCReco :  [@sequence::CaloMC.TruthMatch, @sequence::CaloClusterMC.TruthMatch,  CrvCoincidenceClusterMatchMC, SelectRecoMC, compressRecoMCs ]

# define products to keep
# First, high-level reco products
  HighRecoProducts : [
	    "keep mu2e::KalSeeds_KFF*_*_*",
	    "keep mu2e::KalSeeds_KSF*_*_*",
	    "keep mu2e::HelixSeeds_MH*_*_*",
	    "keep mu2e::TimeClusters_MH*_*_*",
	    "keep mu2e::CaloClusters_CaloClusterMaker_*_*",
            "keep art::TriggerResults_*_*_*"
	    ]
# low-level reco products, selected to match the high-level reco objects
  LowRecoProducts : [ "keep *_SelectRecoMC_*_*",
             "keep mu2e::ComboHitCollection_*_*_*"
	    ]
# low-level reco products, without any high-level match
  AllRecoProducts : [ 
            "keep mu2e::StrawDigis_makeSD_*_*",
            "keep mu2e::StrawHitFlags_FlagBkgHits_StrawHits_*",
            "keep mu2e::ComboHitCollection_makeSH_*_*",
	    "keep mu2e::CaloDigis_CaloDigiMaker_*_*",
	    "keep mu2e::CaloHits_CaloHitMaker_*_*",
	    "keep mu2e::CrvDigis_CrvDigi_*_*",
	    "keep mu2e::CrvRecoPulses_CrvRecoPulses_*_*",
	    "keep mu2e::CrvCoincidenceClusters_CrvCoincidenceClusterFinder_*_*"
	    ]
# MC truth matched to reco
  MCRecoProducts : [
            "keep mu2e::ProtonBunchIntensity_*_MeanIntensity_*",
	    "keep *_genCounter_*_*",
	    "keep *_compressRecoMCs_*_*"
	    ]
# Digi-leverl MC truth 
  DigiMCProducts : [
            "keep mu2e::ProtonBunchIntensity_*_MeanIntensity_*",
	    "keep *_genCounter_*_*",
	    "keep mu2e::PrimaryParticle_*_*_*",
	    "keep mu2e::ProtonBunchIntensity_protonBunchIntensity_*_*",
	    "keep mu2e::EventWindowMarker_EWMProducer_*_*",
            "keep mu2e::ProtonBunchTimeMC_EWMProducer_*_*",
            "keep mu2e::ProtonBunchTime_EWMProducer_*_*",
	    "keep *_compressDigiMCs_*_*"
	    ]
}

# override CalPatRec defaults: FIXME!
Reconstruction.filters.CalHelixFinderDe.StrawHitFlagCollectionLabel                 : "FlagBkgHits:ComboHits"
Reconstruction.filters.CalHelixFinderDmu.StrawHitFlagCollectionLabel                 : "FlagBkgHits:ComboHits"

# override CaloMC Truth matching provenance for compression

Reconstruction.producers.CaloHitTruthMatch.caloShowerSimCollection : "compressDigiMCs"
Reconstruction.producers.CaloHitTruthMatch.primaryParticle : "compressDigiMCs"
# fix time map lookup
Reconstruction.producers.CrvCoincidenceClusterMatchMC.timeOffsets.inputs :  [ @sequence::DigiCompression.TimeMaps ]

# all production tracks
Reconstruction.TrackReco : [
  @sequence::Reconstruction.DeReco,
  @sequence::Reconstruction.UeReco,
  @sequence::Reconstruction.DmuReco,
  @sequence::Reconstruction.UmuReco ]
#
# Full reconstruction Path
Reconstruction.RecoPath : [
  @sequence::Reconstruction.CaloReco,
  @sequence::Reconstruction.TrkReco,
  @sequence::Reconstruction.CrvReco,
  @sequence::Reconstruction.TrackReco
]
# Full reco path with MC
Reconstruction.RecoMCPath : [
  @sequence::Reconstruction.RecoPath,
  @sequence::Reconstruction.MCReco,
  RecoFilter
]
# default output
Reconstruction.Output : {
  module_type : RootOutput
  SelectEvents : [ RecoPath ]
  fileName    : @nil
  outputCommands : [ "keep *_*_*_*" ]
#  outputCommands : [ "drop *_*_*_*",
#  @sequence::Reconstruction.HighRecoProducts,
#  @sequence::Reconstruction.LowRecoProducts,
#  @sequence::Reconstruction.MCRecoProducts]
}

END_PROLOG
