#
# Prolog to create primary (signal, signal-like or calibration) particles and subsequent detector steps
#
#include "TrackerMC/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "CRVResponse/fcl/prolog.fcl"
#include "Filters/fcl/prolog.fcl"
#include "Compression/fcl/prolog.fcl"
#
BEGIN_PROLOG

Primary: {
  producers : {
    @table::TrackerMC.StepProducers
    @table::CaloMC.StepProducers
    CrvSteps :{
      @table::CrvSteps
      stepPointsModuleLabels : ["g4run"]
    }
    compressDetStepMCs : {
      module_type : CompressDetStepMCs
      strawGasStepTag : "StrawGasStepMaker"
      caloShowerStepTag : "CaloShowerStepMaker"
      crvStepTag : "CrvSteps"
      simParticleTag : "g4run"
      mcTrajectoryTag : "g4run"
      debugLevel : 0
      # save StepPoints in VDs, ProtonAbsorber and ST
      stepPointMCTags : [ "g4run:virtualdetector", "g4run:protonabsorber", "g4run:stoppingtarget" ]
      compressionOptions : @local::DetStepCompression.standardCompression
    }
    FindMCPrimary : {
      module_type : FindMCPrimary
      SinglePrimary : true
      GenParticles : "compressDetStepMCs"
      SimParticles : "compressDetStepMCs"
      PrimaryGenIds : [] # this is intentionally empty: there should only be 1 GenParticle in primary production
    }
  }

  filters : {

# default step filter for Sim Primary selection
    DetStepFilter : {
      module_type : DetectorStepFilter
      StrawGasSteps : [ "StrawGasStepMaker" ]
      CaloShowerSteps : [ "CaloShowerStepMaker" ]
      CrvSteps : [ ] # dont filter on CRV for primaries
      MinimumTrkStepEnergy : 1.0e-6 # 1 ev
      MinimumCaloStepEnergy : 0.0
      MinimumCrvStepEnergy : 1.0e-6 # get a real value from CRV experts FIXME!
      MinimumPartMom : 80.0 # MeV/c
      MaximumPartMom : 1e6 # MeV/c
      KeepPDG : [ ] # Loop at steps from all particle types
      MinimumTrkSteps : 10 # primary must produce at least this many TrkSteps
      MinimumSumCaloStepE : 50.0 # or at least this much calo energy
    }
  }
  DetStepSequence : [ 
    @sequence::TrackerMC.StepSim,
    @sequence::CaloMC.StepSim,
    CrvSteps ]
  DetStepFilterSequence : [ DetStepFilter, compressDetStepMCs ]

  KeptProducts : [
		       "keep mu2e::StrawGasSteps_compressDetStepMCs_*_*",
		       "keep mu2e::CaloShowerSteps_compressDetStepMCs_*_*",
		       "keep mu2e::CrvSteps_compressDetStepMCs_*_*",
		       "keep mu2e::StepPointMCs_compressDetStepMCs_virtualdetector_*",
		       "keep mu2e::StepPointMCs_compressDetStepMCs_protonabsorber_*",
		       "keep mu2e::StepPointMCs_compressDetStepMCs_stoppingtarget_*",
		       "keep mu2e::SimParticlemv_compressDetStepMCs_*_*",
		       "keep mu2e::SimParticleart::Ptrmu2e::MCTrajectorystd::map_compressDetStepMCs_*_*",
		       "keep mu2e::GenParticles_compressDetStepMCs_*_*",
		       "keep mu2e::PrimaryParticle_*_*_*",
                       "keep mu2e::CosmicLivetime_*_*_*",
		       "keep art::TriggerResults_*_*_*",
		       "keep mu2e::StatusG4_*_*_*",
		       "keep mu2e::GenEventCount_*_*_*" ]

  analyzers: {
    genCountLogger: { module_type: GenEventCountReader makeHistograms: false }
  }

  Output : {
     module_type : RootOutput
     SelectEvents : [ TriggerPath ]
     fileName    : @nil

     # drop StepPoints from calorimeter
  }
  EndSequence : [ genCountLogger ]
# define paths
}
Primary.PrimarySequence : [ @sequence::Primary.DetStepSequence, @sequence::Primary.DetStepFilterSequence, FindMCPrimary ]
Primary.EndPath : [ @sequence::Primary.EndSequence, Output ]
Primary.Output.outputCommands : [ "drop *_*_*_*",
		       @sequence::Primary.KeptProducts]
END_PROLOG
