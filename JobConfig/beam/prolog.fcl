#
#  Common config for all beam jobs
#
#include "Mu2eG4/fcl/prolog.fcl"
#include "EventGenerator/fcl/prolog.fcl"
#include "JobConfig/pileup/prolog.fcl"
BEGIN_PROLOG

Beam: {

   producers: {
      generate: @local::PrimaryProtonGun
      genCounter: { module_type: GenEventCounter }
      g4run : @local::g4run

      compressPVBeam : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "BeamFilter" ]
      }

      compressPVNeutrals : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "NeutralsFilter" ]
      }

      compressPVextmonBeam : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "extmonBeamFilter" ]
      }

      compressPVextmonRegion : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "extmonRegionFilter" ]
      }

      compressPVTargetStops: {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "TargetStopFilter" ]
      }

      compressPVIPAStops: {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "IPAStopFilter" ]
      }

# below are used for stopped muon daughter selecting/vetoing

      stoppedMuonFinder: {
         module_type: "StoppedParticlesFinder"
         particleInput: "g4run"
         particleTypes: [ 13, -13 ]
         physVolInfoInput: "g4run:eventlevel"
         useEventLevelVolumeInfo: true
         stoppingMaterial: "StoppingTarget_Al"
         verbosityLevel: 1
      }

      IPAMuonFinder : {
         module_type : StoppedParticlesFinder
         particleInput : "g4run"
         useEventLevelVolumeInfo: true
         physVolInfoInput: "g4run:eventlevel"
         stoppingMaterial : "IPAPolyethyelene"
         particleTypes : [ 13, -13 ]
         verbosityLevel: 1
      }

      stoppedMuonDaughters: {
         module_type: SimParticleDaughterSelector
         particleInput: "stoppedMuonFinder"
         # EMCascade should not be vetoed because we do not re-simulate it
         processes: [ "DIO", "NuclearCapture" ]
      }

   }

   filters: {

      BeamFilter: {
         module_type: FilterG4Out
         mainHitInputs : [ "g4run:Beam" ]
         extraHitInputs : [ "g4run:virtualdetector" ]
         vetoDaughters: []
      }

      NeutralsFilter: {
         module_type: FilterG4Out
         mainHitInputs : [ "g4run:Neutrals" ]
         extraHitInputs : [ "g4run:virtualdetector" ]
         vetoDaughters: []
      }

      extmonBeamFilter: {
         module_type: FilterG4Out
         mainHitInputs : [ "g4run:extmonbeam" ]
         extraHitInputs : [ "g4run:virtualdetector" ]
         vetoDaughters: []
      }

      extmonRegionFilter: {
         module_type: FilterG4Out
         mainHitInputs : [ "g4run:extmonregion" ]
         extraHitInputs : [ "g4run:virtualdetector" ]
         vetoDaughters: []
      }

      TargetStopFilter: {
         module_type: FilterG4Out
         mainHitInputs: []
         extraHitInputs: [ "g4run:virtualdetector" ]
         mainSPPtrInputs: [ "stoppedMuonFinder" ]
      }

      IPAStopFilter: {
         module_type: FilterG4Out
         mainHitInputs: []
         extraHitInputs: [ "g4run:virtualdetector" ]
         mainSPPtrInputs: [ "IPAMuonFinder" ]
      }

      FlashFilter: {
         module_type: FilterG4Out
         mainHitInputs:  [ "g4run:tracker", "g4run:calorimeter", "g4run:CRV", "g4run:virtualdetector" ]
         vetoParticles:  [ "stoppedMuonDaughters" ]
      }


# resamplers

      beamResampler: {
         module_type: ResamplingMixer
         fileNames: @nil
         readMode: "sequential"
         wrapFiles: true
         mu2e: {
            writeEventIDs : true
            products: {
               genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
               simParticleMixer: { mixingMap: [ [ "BeamFilter", "" ] ] }
               stepPointMCMixer: { mixingMap: [
                     [ "BeamFilter:virtualdetector", ":" ],
                     [ "BeamFilter:Beam", ":" ]
                  ] }
               simTimeOffset : "protonTimeOffset"
               volumeInfoMixer: {
                  srInput: "compressPVBeam"
                  evtOutInstanceName: "eventlevel"
               }
            }
         }
      }

      neutralsResampler: {
         module_type: ResamplingMixer
         fileNames: @nil
         readMode: "sequential"
         wrapFiles: true
         mu2e: {
            writeEventIDs : true
            products: {
               genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
               simParticleMixer: { mixingMap: [ [ "NeutralsFilter", "" ] ] }
               stepPointMCMixer: { mixingMap: [
                     [ "NeutralsFilter:Neutrals", ":" ]
                  ] }

               volumeInfoMixer: {
                  srInput: "compressPVNeutrals"
                  evtOutInstanceName: "eventlevel"
               }
            }
         }
      }

      EarlyPrescaleFilter : {
        module_type : PrescaleEvent
        nPrescale         : 100 # test value FIXME
        triggerPath        : "earlyFlashPath"
        triggerFlag   : ["PrescaleRandom"]
      }
   }

   outputs: {

      BeamOutput : {
        module_type : RootOutput
        SelectEvents: ["BeamPath"]
        outputCommands:   [ "drop *_*_*_*",
          "keep mu2e::GenParticles_*_*_*",
          "keep mu2e::GenEventCount_*_*_*",
          "keep mu2e::StatusG4_*_*_*",
          "keep *_BeamFilter_*_*",
          "keep *_compressPVBeam_*_*"
        ]
        fileName : "sim.owner.Beam.version.sequencer.art"
      }

      NeutralsOutput : {
        module_type : RootOutput
        SelectEvents: ["NeutralsPath"]
        outputCommands:   [ "drop *_*_*_*",
          "keep mu2e::GenParticles_*_*_*",
          "keep mu2e::GenEventCount_*_*_*",
          "keep mu2e::StatusG4_*_*_*",
          "keep *_NeutralsFilter_*_*",
          "keep *_compressPVNeutrals_*_*"
        ]
        fileName : "sim.owner.Neutrals.version.sequencer.art"
      }

      extmonbeamOutput : {
         module_type : RootOutput
         SelectEvents: ["ExtMonBeamPath"]
         outputCommands:   [ "drop *_*_*_*",
            "keep mu2e::GenParticles_*_*_*",
            "keep mu2e::GenEventCount_*_*_*",
            "keep mu2e::StatusG4_*_*_*",
            "keep *_extmonBeamFilter_*_*",
            "keep *_compressPVextmonBeam_*_*"
         ]
      }

      extmonregionOutput : {
         module_type : RootOutput
         SelectEvents: ["ExtMonRegionPath"]
         outputCommands:   [ "drop *_*_*_*",
            "keep mu2e::GenParticles_*_*_*",
            "keep mu2e::GenEventCount_*_*_*",
            "keep mu2e::StatusG4_*_*_*",
            "keep *_extmonRegionFilter_*_*",
            "keep *_compressPVextmonRegion_*_*"
         ]
      }

      TruncatedOutput : {
         module_type : RootOutput
         SelectEvents: ["g4StatusFilter"]
         outputCommands:   [ "drop *_*_*_*",
            "keep mu2e::GenParticles_*_*_*",
            "keep mu2e::GenEventCount_*_*_*",
            "keep mu2e::StatusG4_*_*_*",
            "keep *_g4run_*_*",
            "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_g4run_*_*",
            "keep *_compressPVFull_*_*"
         ]
      }

      TargetStopOutput : {
        module_type : RootOutput
        SelectEvents: [targetStopPath]
        outputCommands:   [ "drop *_*_*_*",
          "keep art::EventIDs_*_*_*",
          "keep mu2e::GenParticles_*_*_*",
          "keep mu2e::GenEventCount_*_*_*",
           "keep mu2e::StatusG4_*_*_*",
           "keep *_TargetStopFilter_*_*",
           "keep *_compressPVTargetStops_*_*"
        ]
        fileName    : "sim.owner.TargetStops.version.sequencer.art"
      }

      IPAStopOutput : {
         module_type : RootOutput
         SelectEvents: [IPAStopPath]
         outputCommands:   [ "drop *_*_*_*",
            "keep mu2e::GenParticles_*_*_*",
            "keep mu2e::GenEventCount_*_*_*",
            "keep mu2e::StatusG4_*_*_*",
            "keep *_IPAStopFilter_*_*",
            "keep *_compressPVIPAStops_*_*"
         ]
         fileName    : "sim.owner.MuIPAStops.version.sequencer.art"
      }

      FlashOutput : {
         module_type: RootOutput
         SelectEvents: [flashPath]
         outputCommands:   [ "keep *_*_*_*"]
         outputCommands:   [ "drop *_*_*_*",
            "keep art::EventIDs_*_*_*",
            "keep mu2e::GenEventCount_*_*_*",
            "keep mu2e::StatusG4_*_*_*",
            "keep mu2e::SimParticleart::Ptrdoublestd::map_*_*_*",
            @sequence::Pileup.KeptProducts
         ]
      }

# Sadly, I have to replicate the content of Pileup.KeptProducts below, since FCL is not a language and won't allow me to define a variable.
# This will be a source of extra maintenance and likely an error sounce in the future.
#
      EarlyFlashOutput : {
         module_type: RootOutput
         SelectEvents: [earlyFlashPath]
         outputCommands:   [ "drop *_*_*_*",
            "keep art::EventIDs_*_*_*",
            "keep mu2e::GenEventCount_*_*_*",
            "keep mu2e::StatusG4_*_*_*",
            "keep mu2e::StrawGasSteps_compressEarlyDetStepMCs_*_*",
            "keep mu2e::CaloShowerSteps_compressEarlyDetStepMCs_*_*",
            "keep mu2e::CrvSteps_compressEarlyDetStepMCs_*_*",
            "keep mu2e::StepPointMCs_compressEarlyDetStepMCs_virtualdetector_*",
            "keep mu2e::StepPointMCs_compressEarlyDetStepMCs_protonabsorber_*",
            "keep mu2e::StepPointMCs_compressEarlyDetStepMCs_stoppingtarget_*",
            "keep mu2e::StatusG4_*_*_*",
            "keep mu2e::SimParticlemv_compressEarlyDetStepMCs_*_*",
            "keep mu2e::SimParticleart::Ptrmu2e::MCTrajectorystd::map_compressEarlyDetStepMCs_*_*",
            "keep mu2e::GenParticles_compressEarlyDetStepMCs_*_*",
            "keep mu2e::PrimaryParticle_*_*_*",
            "keep mu2e::CosmicLivetime_*_*_*",
            "keep art::TriggerResults_*_*_*",
            "keep mu2e::GenEventCount_*_*_*"
         ]
      }
   }

# define some paths; these can be mixed and matches as art guarantees no duplicate running
   g4StatusPath : [generate, genCounter, g4run, "!g4statusFilter", compressPVFull ]

# define regions where particles may eventually interact with the detectors (CRV or trracker/calo), See doc 26541 for a graphical description
# Mu2eG4 cuts are evaluated in the listed order.
# The first match wins.  For the "intersection"
# type, the first false stops the evaluation.
# For the "union" type the first true stops the evaluation.

  DetectorRegionCuts: {
    type: intersection
    pars: [
        // Plane on the west side, outside of the wall
        { type: plane normal: [  0, 0, 1 ] point : [ 0, 0, -4851 ] },

        // Yuri's e-mail 2015-04-10: x=1612. from CRV considerations.
        // This is also large enought to enclose TS3 (its half length is 975 mm).
        // Yuri: Moved the plane to cover all the shielding from stage 1.
       { type: plane normal: [ -1, 0, 0 ] point : [ 2800., 0, 0 ] },

        // Make sure the charged particle beam reaches our DS2Vacuum stopping volume
        {type: notInVolume pars:[TS2Vacuum, TS3Vacuum, TS4Vacuum, TS5Vacuum, Coll31, Coll32, Coll51, TS2InnerCryoShell, TS3InnerCryoShell, TS4InnerCryoShell, TS2CryoInsVac, TS3CryoInsVac, PbarAbsDisk, PbarAbsWedge, VirtualDetector_Coll31_In, VirtualDetector_Coll32_In, VirtualDetector_Coll31_Out, VirtualDetector_Coll32_Out, Coll31OutRecord, Coll32InRecord, Coll31OutRecord, VirtualDetector_TS4_Bend, VirtualDetector_Coll5_In, VirtualDetector_Coll5_Out, VirtualDetector_Coll5_OutSurf]},

        // This union splits the output of the above cuts
        // into two exclusive streams; Beam (charged particles entering the DS) and Neutrals ((mostly)neutral particles approaching the CRV
        { type: union pars:  [
            {
               type: intersection
               pars: [
                  { type: inVolume pars: [DS2Vacuum] },
                  { type: isCharged }
               ]
               write: Beam
            },
              {  type: constant
                 value: true
                 write: Neutrals
              }
           ]
        }
     ]
  }

# define extinction monitor region
  extMonRegionCuts: {
     type: intersection
     pars: [
        {
           type: plane
           normal: @local::mu2eg4BeamDumpNormal
           // Dump core center: (661.90,  527.40, -19428.2)
         // A plane 950 mm beyond the core center as measured along
         // the "beam" direction normal to the dump face.
         // DeltaZ = L/cos(13.72 degrees)
           point: [ 661.90, 527.40, -20406.10 ]
        },

        // Split the output of the "plane" cut above into two exclusive streams
        { type: union pars:  [

              {  type: intersection
               pars: [
                  {
                     type: inVolume
                     pars:
                     [  collimator1Channel,
                        HallAir,
                        ExtMonFNALfilterMagnetAperture,
                        ExtMonFNALfilterMagnetApertureMarginUp,
                        ExtMonFNALfilterMagnetApertureMarginDn
                     ]
                  },
                  { type: isCharged }
               ]
                 write: extmonbeam
              },

              { type: constant  value: true       write: extmonregion }
           ]
        }
     ]
  }

  beamResamplerSequence : [genCounter, protonTimeOffset, beamResampler]
  neutralsResamplerSequence : [genCounter, protonTimeOffset, neutralsResampler]

}
END_PROLOG
