// Andrei Gaponenko, 2015

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "Mu2eG4/fcl/prolog.fcl"

# Give this job a name.
process_name :  TS

source : {
   module_type : RootInput
}

services : {

   message               : @local::default_message
   TFileService          : { fileName : "nts.owner.TS.version.sequencer.root" }
   RandomNumberGenerator : { }

   GeometryService        : { inputFile      : "JobConfig/common/geom_baseline.txt" }
   ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
   GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
   G4Helper               : { }
   SeedService            : @local::automaticSeeds
}

physics : {
   analyzers: {
      genCountLogger: {
         module_type: GenEventCountReader
      }
   }

   producers: {
      g4run : {
         module_type: Mu2eG4
         physics: @local::mu2eg4DefaultPhysics
         ResourceLimits: @local::mu2eg4DefaultResourceLimits
	 TrajectoryControl: @local::mu2eg4NoTrajectories
         debug:  @local::mu2eg4DefaultDebug
         visualization: @local::mu2eg4NoVisualization

	 MultiStageParameters : {
            simParticleNumberOffset: 100000  // safe b/c of g4.particlesSizeLimit in stage1
            genInputHits: [ "muonBeamFilter:mubeam" ]
            inputSimParticles: "muonBeamFilter"
	    inputMCTrajectories: ""
            inputPhysVolumeMultiInfo: "compressPVmuonBeam"
	 }

         SDConfig : {
            enableSD : [ virtualdetector, CRV ] // activate just the explicitly listed SDs
            preSimulatedHits: ["muonBeamFilter:virtualdetector"]
	    TimeVD: { times: [] }
         }

         Mu2eG4StackingOnlyCut: @local::mu2eg4CutNeutrinos

         Mu2eG4SteppingOnlyCut: {}

         Mu2eG4CommonCut: {
            type: union
            pars: [

               @local::mu2eg4CutDeltaElectrons,

               {
	          type: inVolume
	          pars: [TS5Vacuum, DS1Vacuum, DS2Vacuum, DS3Vacuum ]
	          write: DSVacuum
	       }
            ]
         }
      }

      compressPVmuonBeam : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "muonBeamFilter" ]
      }

      compressPVCRV : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "crvFilter" ]
      }

      compressPVFull : {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "g4run" ]
      }
   }

   filters: {
      muonBeamFilter: {
         module_type: FilterG4Out
         mainHitInputs : [ "g4run:DSVacuum" ]
         extraHitInputs : [ "g4run:virtualdetector" ]
         vetoDaughters: []
      }

      crvFilter: {
         module_type: FilterG4Out
         mainHitInputs : [ "g4run:CRV" ]
         extraHitInputs : [ "g4run:virtualdetector" ]
         vetoDaughters: []
      }

      g4status: {
         module_type: FilterStatusG4
         input: "g4run"
      }

      g4consistent: {
         module_type: FilterStatusG4
         input: "g4run"
	 maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
      }
   }

   trigmubeam : [g4run, g4consistent, muonBeamFilter, compressPVmuonBeam]
   trigcrv : [g4run, g4consistent, crvFilter, compressPVCRV]
   g4StatusFilter : [g4run, "!g4status", compressPVFull ]
   trigger_paths  : [trigmubeam, trigcrv, g4StatusFilter]

   outputs: [truncatedEvtsOutput, mubeamout, crvout]
   an: [ genCountLogger ]
   end_paths: [outputs, an]
}

outputs: {

   mubeamout : {
      module_type : RootOutput
      SelectEvents: ["trigmubeam"]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_muonBeamFilter_*_TS",
         "keep *_compressPVmuonBeam_*_TS"
      ]
      fileName    : "sim.owner.TS-mubeam.version.sequencer.art"
   }

   crvout : {
      module_type : RootOutput
      SelectEvents: ["trigcrv"]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_crvFilter_*_TS",
         "keep *_compressPVCRV_*_TS"
      ]
      fileName    : "sim.owner.TS-crv.version.sequencer.art"
   }

  truncatedEvtsOutput : {
      module_type : RootOutput
      SelectEvents: ["g4StatusFilter"]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_g4run_*_*",
         "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_g4run_*_*",
         "keep *_compressPVFull_*_*"
      ]
      fileName    : "sim.owner.TS-truncated.version.sequencer.art"
   }

}

physics.producers.g4run.physics.minRangeCut : 1. // mm

