// 
// Ralf Ehrlich and Ray Culbertson, 2016

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "Mu2eG4/fcl/prolog.fcl"

BEGIN_PROLOG
#----------------------------------------------------------------
# Mu2eG4 cuts

crvStage1End: 
{
   type: inVolume
   pars: [ TrackerMother, CalorimeterMother ]
   write: crvStage1
}

crvTarget5Box: 
{
   type: intersection
   pars: 
   [
      // +z plane
      { type: plane normal: [  0, 0, 1 ] point : [ 0, 0, 900 ] },

      // -x plane 
      { type: plane normal: [ -1, 0, 0 ] point : [ -1050.0, 0, 0 ] },

      #// above the bottom of the TS cryostat
      { type: plane normal: [  0, 1, 0 ] point : [ 0, -1000, 0 ] },
      // above the floor
      #{ type: plane normal: [  0, 1, 0 ] point : [ 0, -2300, 0 ] },
      // muon, energy
      { type: intersection 
        pars: 
        [
          { type: pdgId  pars: [ 13, -13 ] }
          //{ type: kineticEnergy  cut: 2000.0 }
        ]
      }
   ]
   write: crvStage1
}


crvOuterBox: 
{
   type: union
   pars: 
   [
      // Upstream plane
      { type: plane normal: [  0, 0, -1 ] point : [ 0, 0, -2440 ] },

      // Downstream plane
      { type: plane normal: [  0, 0, 1 ] point : [ 0, 0, 18910 ] },

      // +x plane
      { type: plane normal: [  1, 0, 0 ] point : [ 0, 0, 0 ] },

      // -x plane (outside of cryo box)
      { type: plane normal: [  -1, 0, 0 ] point : [ -7390, 0, 0 ] },

      // +y plane
      { type: plane normal: [  0, 1, 0 ] point : [ 0, 2760, 0 ] },

      // -y plane
      { type: plane normal: [  0, -1, 0 ] point : [ 0, -2100, 0 ] }
   ]
}

crvInnerBox: 
{
   type: intersection
   pars: 
   [
      // Upstream plane
      { type: plane normal: [  0, 0, 1 ] point : [ 0, 0, -2240 ] },

      // Downstream plane
      { type: plane normal: [  0, 0, -1 ] point : [ 0, 0, 18720 ] },

      // +x plane
      { type: plane normal: [  -1, 0, 0 ] point : [ -1430, 0, 0 ] },

      // -x plane
      { type: plane normal: [  1, 0, 0 ] point : [ -6370, 0, 0 ] },

      // +y plane
      { type: plane normal: [  0, -1, 0 ] point : [ 0, 2470, 0 ] },

      // -y plane
      { type: plane normal: [  0, 1, 0 ] point : [ 0, -2100, 0 ] }
   ]
}


cosmicKineticEnergyCuts: 
{
   type: union
   pars:
   [
      {
        type: intersection
        pars: 
        [ 
          { type: union pars: [ @local::crvOuterBox, @local::crvInnerBox ] },
          { type: kineticEnergy cut: 80.0 }, 
          { type: pdgId pars: [ 22, 11, -11 ] }
        ]
      },
      {
        type: intersection
        pars: 
        [ 
          { type: union pars: [ @local::crvOuterBox, @local::crvInnerBox ] },
          { type: kineticEnergy cut: 3.4 }, 
          { type: pdgId pars: [ 2212, 2112 ] }
        ]
      }
   ]
}
#----------------------------------------------------------------
END_PROLOG

#================================================================
# Give this job a name.
process_name :  cosmics1

source : 
{
   module_type : EmptyEvent
   maxEvents : @nil
}

services : @local::Services.Sim

physics : 
{
   analyzers: 
   {
      genCountLogger: 
      { 
         module_type: GenEventCountReader 
      }

      collectionSizes: 
      {
	 module_type: CollectionSizeAnalyzer
         useModuleLabel: true 
         useInstanceName: true 
         useProcessName: false
      }

      statusG4: { module_type: StatusG4Analyzer input: g4run }
   }

   producers: 
   {
      generate: 
      {
         module_type          : EventGenerator
         # inputfile is defined in top level fcl files
      }

      genCounter: 
      {
         module_type: GenEventCounter
      }

      g4run : 
      {
         module_type: Mu2eG4
         physics: @local::mu2eg4DefaultPhysics
         ResourceLimits: @local::mu2eg4DefaultResourceLimits
	 TrajectoryControl: @local::mu2eg4DefaultTrajectories 
         debug: @local::mu2eg4DefaultDebug
         visualization: @local::mu2eg4NoVisualization

         generatorModuleLabel: generate

         SDConfig: 
         {
            enableSD: [ ]
            TimeVD: { times: [] }
         }

         Mu2eG4StackingOnlyCut: @local::mu2eg4CutNeutrinos

         Mu2eG4SteppingOnlyCut: {}

         // Mu2eG4 cuts are evaluated in the listed order.
         // The first match wins.  For the "intersection"
         // type, the first false stops the evaluation.
         // For the "union" type the first true stops the evaluation.
         Mu2eG4CommonCut: 
         {
            type: union
            pars: 
            [
               # low energy electron
               @local::cosmicKineticEnergyCuts,
               # entering TS5 region
	       @local::crvTarget5Box,
	       # xy plane downstream of TS5
               { type: plane 
                 normal: [  0, 0, 1 ] 
                 point : [ 0, 0, 2712 ] },
	       # yz plane downstream of TS5
               { type: plane 
                 normal: [  -1, 0, 0 ] 
                 point : [ -5300, 0, 0 ] },
               # going out the bottom
               {
	          type: inVolume
                  pars: [ worldDirtBottom ]
               }
            ]
         }
      }

      compressPV : 
      {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "cosmicFilter" ]
      }

   }

   filters: 
   {

      cosmicFilter: 
      {
         module_type: FilterG4Out
         mainHitInputs : [ "g4run:crvStage1" ]
         extraHitInputs : []
         mcTrajectoryInputs : [ "g4run" ]
         vetoDaughters: []
      }


      g4consistent: {
         module_type: FilterStatusG4
         input: "g4run"
	 maxAcceptedStatus: 9  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
      }
   }

   trigFilter     : [generate, genCounter, g4run, g4consistent, cosmicFilter, compressPV]
   trigger_paths  : [trigFilter]

   outputs: [filteredOutput]
   an: [ genCountLogger, collectionSizes, statusG4 ]
   end_paths: [outputs, an]
}

outputs: 
{

   filteredOutput : 
   {
      module_type : RootOutput
      SelectEvents: ["trigFilter"]
      outputCommands:   
      [ 
         "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_cosmicFilter_*_*",
         "keep *_compressPV_*_*"
      ]
   }


}

// Larger range cut for the first stage
physics.producers.g4run.physics.minRangeCut : 1.0 // mm

//allow more sim particles
physics.producers.g4run.ResourceLimits.maxSimParticleCollectionSize: 1000000

services.GeometryService.inputFile : "JobConfig/cosmic/geom_cosmic.txt"


// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.SeedService.baseSeed         :  8
services.SeedService.maxUniqueEngines :  20

services.scheduler.wantSummary: true


physics.producers.generate.inputfile : "JobConfig/cosmic/genconfig_cosmic_target5.txt"
services.TFileService.fileName       : "nts.owner.cosmic-g4s1-target5.version.sequencer.root"
outputs.filteredOutput.fileName      : "sim.owner.cosmic-g4s1-target5.version.sequencer.art"


//
// This tells emacs to view this file in the art-fhicl mode.
// Local Variables:
// mode:art-fhicl
// End:
