#
# This file defines a job plan for calibration cosmics
# which are any cosmics that leave some track in the detectors.
# It is intended to be included, not run.  Files such as
# cosmic_calib_ext.fcl select items from this fcl to define 
# the final fcl.
#
#
#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "Validation/fcl/prolog.fcl"

BEGIN_PROLOG

// cut EM showers far from the detector, tracker in inserted position
// this box encloses the CRV
killOuterShowersCrv: 
{
   type: intersection
   pars: 
   [
      { type: plane normal: [  0,  0, -1 ] point : [ 0, 0, -2440 ] }, //-z
      { type: plane normal: [  0,  0,  1 ] point : [ 0, 0, 18910 ] }, //+z
      { type: plane normal: [  1,  0,  0 ] point : [ 0, 0, 0 ] }, //+x
      { type: plane normal: [ -1,  0,  0 ] point : [ -7390, 0, 0 ] }, //-x
      { type: plane normal: [  0,  1,  0 ] point : [ 0, 2760, 0 ] }, // +y
      { type: plane normal: [  0, -1,  0 ] point : [ 0, -2100, 0 ] }, // -y
      { type: kineticEnergy cut: 80.0 }, 
      { type: pdgId pars: [ 22, 11, -11 ] }
   ]
}

// cut EM showers far from the detector, tracker in extracted position
// this box surrounds only the tracker and calorimater
killOuterShowersExt: 
{
   type: intersection
   pars: 
   [
      { type: plane normal: [  0,  0, -1 ] point : [ -3904, 0, 20000 ] }, //-z
      { type: plane normal: [  0,  0,  1 ] point : [ -3904, 0, 29000 ] }, //+z
      { type: plane normal: [  1,  0,  0 ] point : [  -900, 0, 25000 ] }, //+x
      { type: plane normal: [ -1,  0,  0 ] point : [ -6900, 0, 25000 ] }, //-x
      { type: plane normal: [  0,  1,  0 ] point : [ -3904, 3000, 25000 ] }, //+y
      { type: plane normal: [  0, -1,  0 ] point : [ -3904, -3000, 25000 ] }, //-y
      { type: kineticEnergy cut: 80.0 }, 
      { type: pdgId pars: [ 22, 11, -11 ] }
   ]
}

# this defines the bottom of the world. If tracing gets here, it can stop.
inDirt: 
{
   type: inVolume
   pars: [ worldDirtBottom, worldDirtNW, worldDirtSW, worldDirtSE, worldDirtNE ]
}

# when to stop tracing, for extended postion
CommonCutExt: 
{
   type: union
   pars: 
   [
      @local::killOuterShowersExt,  # stop in outer shower
      @local::inDirt                # stop if in dirt
   ]
}

# when to stop tracing, for extended postion
CommonCutCrv: 
{
   type: union
   pars: 
   [
      @local::killOuterShowersCrv,  # stop in outer shower
      @local::inDirt                # stop if in dirt
   ]
}


END_PROLOG


#================================================================


source : 
{
   module_type : EmptyEvent
   maxEvents : @nil
}

services : @local::Services.Sim

physics : 
{

   producers: 
   {
      generate: 
      {
         module_type          : EventGenerator
         inputfile    : @nil
      }

      genCounter: 
      {
         module_type: GenEventCounter
      }

      g4run : 
      {
         module_type: Mu2eG4
         physics: @local::mu2eg4DefaultPhysics
         ResourceLimits: @local::mu2eg4DefaultResourceLimits
	 TrajectoryControl: @local::mu2eg4DefaultTrajectories 
         debug: @local::mu2eg4DefaultDebug
         visualization: @local::mu2eg4NoVisualization

         generatorModuleLabel: generate
         MultiStageParameters: {} // this is the first stage

         SDConfig: 
         {
            enableSD: [ tracker, calorimeter, CRV, virtualdetector ]
            TimeVD: { times: [] }
         }

         Mu2eG4StackingOnlyCut: @local::mu2eg4CutNeutrinos

         Mu2eG4SteppingOnlyCut: {}

         Mu2eG4CommonCut: @nil
      }

      # trk and cal digis
      @table::TrackerMC.producers
      @table::CaloDigiMC.producers
      @table::CrvDAQPackage.producers
      compressPV : 
      {
         module_type: CompressPhysicalVolumes
         volumesInput : "g4run"
         hitInputs : []
         particleInputs : [ "g4run" ]
      }

   }

   filters: 
   {

      calibCosmicFilter:
      {
         module_type: CalibCosmicFilter
	 # the basic SimParticle list, usually from g4run
	 simParticles : "g4run"
	 # the main collections driving the filter and the save list
	 strawDigiMCs : "makeSD"
	 caloShowerSteps : "CaloShowerStepFromStepPt:calorimeter"
	 crvSteps : "g4run:CRV"
	 crvDigiMCs : "CrvWaveforms"
	 # the filter cuts, these are OR'ed
	 minTrkDigis : 10 # digi count
	 minCalEnergy : 5.0 # MeV
	 minCrvSteps : 1 # StepPointMC count
	 minCrvDigis : 1 # digi count
	 # re-write and save these StepPointMCs 
	 copyHits : [ "g4run:tracker", "g4run:CRV", "g4run:virtualdetector" ]
	 # with these instance names
	 copyHitsNames : ["tracker", "crv", "virtualdetector"]
	 # re-write and save these Trajectories 
	 copyTrajs : [ "g4run" ]
	 # with these instance names
	 copyTrajsNames : [ "" ]
	 verbose : 0
      }


      g4status: 
      {
         module_type: FilterStatusG4
         input: "g4run"
      }

      g4consistent: {
         module_type: FilterStatusG4
         input: "g4run"
	 maxAcceptedStatus: 9
      }
   }

   analyzers: 
   {
      genCountLogger: 
      { 
         module_type: GenEventCountReader 
      }

      collectionSizes: 
      {
	 module_type: CollectionSizeAnalyzer
         useModuleLabel: true 
         useInstanceName: true 
         useProcessName: false
      }

      statusG4: { 
	 module_type: StatusG4Analyzer 
	 input: g4run 
      }

      validation: { 
	 module_type: Validation 
	 validation_level : 1 
	 # so that the module doesn't try to read corrupt events
	 SelectEvents : ["trigFilter"] 
      }
   }

   trigFilterNoCrv : [generate, genCounter, g4run, 
      g4status, g4consistent,  makeSD,
      @sequence::CaloDigiMC.DigiSim, 
      calibCosmicFilter, compressPV]
   trigFilter     : [generate, genCounter, g4run, 
      g4status, g4consistent,  makeSD,
      @sequence::CaloDigiMC.DigiSim, 
      @sequence::CrvDAQPackage.CrvResponseSequence, 
      calibCosmicFilter, compressPV]
   trigger_paths  : [trigFilter]

   outputs: [filteredOutput]
   an: [ genCountLogger, collectionSizes, statusG4, validation ]
   end_paths: [outputs, an]
}

outputs: 
{

   filteredOutput : 
   {
      module_type : RootOutput
      SelectEvents: ["trigFilter"]
      outputCommands:
      [ 
#         "keep *_*_*_*"
         "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_compressPV_*_calibCosmicExt",
         "keep mu2e::StrawDigis_*_*_*",
         "keep mu2e::*_calibCosmicFilter_*_*",
         "keep mu2e::CaloDigis_*_*_*",
         "keep mu2e::CrvDigis_*_*_*"
      ]
   }
}

#smaller step required when detectors are simulated
physics.producers.g4run.physics.minRangeCut : 0.01 // mm

# don't bother with time collections
physics.producers.makeSD.TimeOffsets : {}
physics.producers.CaloShowerStepROFromShowerStep.TimeOffsets : {}
physics.producers.CrvPhotons.timeOffsets : {}

// turn on Calo compression for muons
physics.producers.CaloShowerStepFromStepPt.compressMuons : true

services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20

services.scheduler.wantSummary: true
services.TimeTracker.printSummary: true

//
// This tells emacs to view this file in the art-fhicl mode.
// Local Variables:
// mode:art-fhicl
// End:


