#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "CRVResponse/fcl/prolog.fcl"
#include "TrkDiag/fcl/KalDiag.fcl"

process_name : CRVAnalysis

source :
{
  module_type : RootInput
  inputCommands: ["keep *", "drop *CaloCrystalOnlyHit*_*_*_*"]
}

services : @local::Services.Reco
services.GeometryService.inputFile : "JobConfig/cosmic/geom_cosmic.txt"

physics :
{
  producers:
  {
    @table::Tracking.producers
    @table::CrvResponsePackage.producers
  }

  analyzers: 
  {
    genCountLogger: { module_type: GenEventCountReader }
    cosmicAnalysis: 
    { 
      module_type               : CosmicAnalysis
      fitterModuleLabel         : "KFFDeM"
      fitterModuleInstance      : ""
      hitmakerModuleLabel       : "makeSH"
      hitmakerModuleInstance    : ""
      g4ModuleLabel             : "detectorFilter"
      generatorModuleLabel      : "generate"
      crvCoincidenceModuleLabel : "CrvCoincidence"
      crvRecoPulsesModuleLabel  : "CrvRecoPulses"
      volumeModuleLabel         : "compressPV"
      filenameSearchPattern     : "cosmic-g4s4"
    }
  }

  # Tracking was run in s4.  Here we only need to re-run the one
  # producer whose outputs are not persistable.
  p1: [@sequence::Tracking.TPRDeM,
       @sequence::CrvResponsePackage.CrvResponseSequence]
  trigger_paths  : [p1]

  e1: [genCountLogger, cosmicAnalysis]
  end_paths      : [e1]
}

// Limit the amount of "Begin processing the ... record" messages

// Limit the amount of "Begin processing the ... record" messages
services.message.destinations.log.categories.ArtReport.reportEvery : 1
services.message.destinations.log.categories.ArtReport.limit : 1
services.message.destinations.log.categories.ArtReport.timespan : 300

// Digitization uses random numbers
services.SeedService.policy           :  autoIncrement
services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20
