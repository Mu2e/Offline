// Re-sample dsregion stream particles from stage-1 outputs
// Yuri Oksuzian, 2019
// based off JobConfig/beam/DS-flash.fcl by Andrei Gaponenko, 2018

#include "JobConfig/beam/prolog.fcl"

BEGIN_PROLOG

crvOuterBox: 
{
   type: union
   pars: 
   [
      // Upstream plane
      { type: plane normal: [  0, 0, -1 ] point : [ 0, 0, -3000 ] },

      // Downstream plane
      { type: plane normal: [  0, 0, 1 ] point : [ 0, 0, 19000 ] },

      // +x plane
      { type: plane normal: [  1, 0, 0 ] point : [ 800, 0, 0 ] },

      // -x plane (outside of cryo box)
      { type: plane normal: [  -1, 0, 0 ] point : [ -7400, 0, 0 ] },

      // +y plane
      { type: plane normal: [  0, 1, 0 ] point : [ 0, 2760, 0 ] },

      // -y plane
      { type: plane normal: [  0, -1, 0 ] point : [ 0, -2100, 0 ] }
   ]
}

cosmicKineticEnergyCuts: 
{
   type: union
   pars:
   [
      {
      // Kills showers outside of CRV box
        type: intersection
        pars: 
        [ 
          { type: union pars: [ @local::crvOuterBox ] },
          { type: kineticEnergy cut: 10.0 }, 
          { type: pdgId pars: [ 2212, 2112, 11, -11, 22  ] }
        ]
      },
      {
      // Kill lower momentum e+/e- stuck in vacuum and air
	 type: intersection
	 pars: 
	 [
	   {type: intersection pars: [ { type: kineticEnergy cut: 1.0 }, { type: pdgId pars: [ 11, -11] }]},
	   {type: inVolume pars: [ TS2Vacuum, TS4Vacuum, DS2Vacuum, HallAir ]}
	 ]
      }
   ]
}


END_PROLOG


process_name: DSvacuumResampler

source:   { module_type : EmptyEvent }
services: { @table::mu2e.services.simServices }
physics:  { @table::mu2e.physics.g4s4Flash } 
outputs:  { @table::mu2e.outputs.g4s4Defs }

//----------------------------------------------------------------
// Mofidy setup for resampling the dsregion from s1 outputs

// We should run genCounter for all EmptyEvent jobs.
physics.producers.genCounter: {module_type: GenEventCounter }
physics.analyzers.genCounterLogger: {module_type: GenEventCountReader}

// Bring in info from the previous stage
physics.filters.dsResample: {
   module_type: ResamplingMixer
   fileNames: @nil  
   readMode: "sequential"
   wrapFiles: true
   mu2e: {
      products: {
	 genParticleMixer: { mixingMap: [ [ "generate", "" ] ] }
	 simParticleMixer: { mixingMap: [ [ "cosmicFilter", ""] ] } 
	 stepPointMCMixer: { mixingMap: [ [ "cosmicFilter:crvStage1", ":" ] ] }
      }
   }
}

// Point Mu2eG4 to the pre-simulated data
physics.producers.g4run.MultiStageParameters: {
   simParticleNumberOffset: 100000 
   genInputHits:  [ "dsResample:crvStage1" ]
   inputSimParticles: "dsResample"
   inputMCTrajectories: ""
   inputPhysVolumeMultiInfo: "" 
}

//----------------------------------------------------------------
// The final filter
physics.filters.dsFilter: {
         module_type: FilterG4Out
         mainHitInputs  : [ "dsResample:crvStage1" ]
         extraHitInputs : []
         vetoDaughters  : []
}

physics.filters.trackerStepPointFilter: {
         module_type : TrackerStepPointFilter 
}

physics.filters.detectorFilter: {
         module_type: FilterG4Out
         mainHitInputs: [ "g4run:tracker", "g4run:calorimeter", "g4run:calorimeterRO", "g4run:CRV" ]
         extraHitInputs : [ "g4run:virtualdetector", "g4run:protonabsorber" ]
         mcTrajectoryInputs : [ "g4run" ]
         vetoDaughters: []
}

physics.filters.stepPointMomentumFilter: {
        module_type: FilterStepPointMomentum
        inputs : [ "detectorFilter:tracker" ]
        cutMomentumMin: 45.  // Drop low momentum tracks
        cutMomentumMax: 500. // Drop straight tracks
}

physics.filters.g4status: {
         module_type: FilterStatusG4
         input: "g4run"
	 maxAcceptedStatus: 1  #  status 10 and above means StepPointMCCollection may have non-dereferencable pointers
}


physics.trig: [genCounter, dsResample, g4run, g4consistent, dsFilter, trackerStepPointFilter, detectorFilter, stepPointMomentumFilter]
physics.g4StatusFilter : [dsResample, g4run, "!g4status"]
physics.outputs: [truncatedEvtsOutput, DSVacuumOut]
physics.an: [genCountLogger]
physics.end_paths: [outputs, an]
physics.trigger_paths: [trig, g4StatusFilter]

outputs.DSVacuumOut: {
      module_type : RootOutput
      SelectEvents: ["trig"]
      outputCommands:   [ 
         "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_detectorFilter_*_*"
      ]
      fileName    : "sim.owner.s2-dsstops-resampler.version.sequencer.art"
}

outputs.truncatedEvtsOutput : {
      module_type : RootOutput
      SelectEvents: ["g4StatusFilter"]
      outputCommands:   [ "drop *_*_*_*",
         "keep mu2e::GenParticles_*_*_*",
         "keep mu2e::GenEventCount_*_*_*",
         "keep mu2e::StatusG4_*_*_*",
         "keep *_g4run_*_*",
         "drop uintmu2e::PhysicalVolumeInfomvstd::pairs_g4run_*_*"
      ]
      fileName    : "sim.owner.s2-dsstops-resampler-truncated.version.sequencer.art"
}

// Set output file names
services.TFileService.fileName: "nts.owner.s2-dsstops-resampler.version.sequencer.root"

//Specify Mu2e geometry
services.GeometryService.simulatedDetector.tool_type : "Mu2e"
physics.producers.g4run.SDConfig.preSimulatedHits: []
physics.producers.g4run.TrajectoryControl: @local::mu2eg4DefaultTrajectories
physics.producers.g4run.Mu2eG4CommonCut:{
            type: union
            pars:
            [
               @local::cosmicKineticEnergyCuts,
               {
	          type: inVolume
                  pars: [ worldDirtBottom ]
               }
            ]
         }
physics.producers.g4run.ResourceLimits.maxSimParticleCollectionSize: 100000
// Test:
//physics.filters.dsResample.fileNames: ["/pnfs/mu2e/persistent/users/oksuzian/workflow/cry_rs1_1019_g4_10_5/outstage/363672.fcllist_191019181515/00/00000/sim.oksuzian.minedep-filter-cat.cryconcat_rs1_1019.002701_00000000.art"]
//physics.filters.dsResample.fileNames: ["/pnfs/mu2e/persistent/users/oksuzian/workflow/cry_rs1_1019_g4_10_5/outstage/683306.fcllist_191024104850/00/00000/sim.oksuzian.minedep-filter.cry-minedep_filter-10-5.002701_00000385.art"]