#
# Prolog to create pileup particle steps for mixing
#
#include "Mu2eG4/fcl/prolog.fcl"
#include "JobConfig/common/mu2eg4.fcl" 
#include "fcl/standardServices.fcl"
#include "EventGenerator/fcl/prolog.fcl"
#include "TrackerMC/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "CRVResponse/fcl/prolog.fcl"
#include "Filters/fcl/prolog.fcl"
#include "Compression/fcl/prolog.fcl"
#
BEGIN_PROLOG

Pileup: {
  producers : {
    g4run : @local::mu2e.physics.producers.g4run.muons
    genCounter: { module_type: GenEventCounter }
    @table::EventGenerator.producers
    @table::TrackerMC.StepProducers
    @table::CaloMC.StepProducers
    CrvSteps : @local::CrvSteps

    compressDetStepMCs : {
      module_type : CompressDetStepMCs
      strawGasStepTag : "StrawGasStepMaker"
      caloShowerStepTag : "CaloShowerStepMaker"
      crvStepTag : "CrvSteps"
      simParticleTag : "g4run"
      stepPointMCTags : [ "g4run:virtualdetector", "g4run:protonabsorber" ]#, "g4run:stoppingtarget" ]
      mcTrajectoryTag : "g4run"
      debugLevel : 0
      compressionOptions : @local::DetStepCompression.extraCompression
    }
  }
  filters : {
# generator truncation filter; only needed for cosmic rays in principle
    g4status: {
      module_type: FilterStatusG4
      input: "g4run"
    }
# step filter to select any detectable signal
    DetStepFilter : {
      module_type : DetectorStepFilter
      StrawGasSteps : [ "StrawGasStepMaker" ] 
      CaloShowerSteps : [ "CaloShowerStepMaker" ]
      CrvSteps : [ "CrvSteps" ]
      MinimumTrkStepEnergy : 1.0e-6 # 1 ev
      MinimumCaloStepEnergy : 0.0 
      MinimumCrvStepEnergy : 1.0e-6 # get a real value from CRV experts FIXME!
      MinimumPartMom : 0.0 # MeV/c
      MaximumPartMom : 1e6 # MeV/c
      KeepPDG : [ ] # all particles accepted
      MinimumTrkSteps : 1
      MinimumSumCaloStepE : 0.01 # check this threshold TODO!
      MinimumCrvSteps : 1
    }
  }
  TriggerSequence : [ generate, genCounter, g4run, g4status,  
    @sequence::TrackerMC.StepSim,
    @sequence::CaloMC.StepSim,
    CrvSteps,
    DetStepFilter,
    compressDetStepMCs ]

  KeptProducts : [ "keep mu2e::StrawGasSteps_compressDetStepMCs_*_*",
		       "keep mu2e::CaloShowerSteps_compressDetStepMCs_*_*",
		       "keep mu2e::CrvSteps_compressDetStepMCs_*_*",
		       "keep mu2e::StatusG4_*_*_*",
		       "keep mu2e::SimParticlemv_compressDetStepMCs_*_*",
		       "keep mu2e::GenParticles_compressDetStepMCs_*_*",
		       "keep art::TriggerResults_*_*_*",
		       "keep mu2e::GenEventCount_*_*_*" ]

  analyzers: {
    genCountLogger: { module_type: GenEventCountReader makeHistograms: false }
  }

  Output : {
     module_type : RootOutput
     SelectEvents : [ TriggerPath ]
     fileName    : @nil
     # drop StepPoints from calorimeter
  }
# define paths
  EndPath : [ genCountLogger, Output ]
}
Pileup.Output.outputCommands : [ "drop *_*_*_*",
		       @sequence::Pileup.KeptProducts]
Pileup.TriggerPath : [ @sequence::Pileup.TriggerSequence ]
END_PROLOG
