#include "Offline/TrkReco/fcl/prolog.fcl"
BEGIN_PROLOG

TrkRecoTrigger : {

  TTrobustHelixFit : {
    @table::TrkReco.RobustHelixFit
  }


  producers : {
    # these module instance allows to remove the helix duplicates
    # from the output of the helix finders.
    # We need an instance for each track trigger sequence
    TTHelixMergerUeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TThelixFinderUe:Negative" ]
    }

    TTHelixMergerUeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TThelixFinderUe:Positive" ]
    }

    TTHelixMergerDeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TThelixFinder:Positive" ]
    }

    TTHelixMergerDeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TThelixFinder:Negative" ]
    }

    TTHelixUCCMergerDeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TThelixFinderUCC:Positive" ]
    }

    TTHelixUCCMergerDeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TThelixFinderUCC:Negative" ]
    }

    TTCalHelixMergerDeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TTCalHelixFinderDe:Positive" ]
    }

    TTCalHelixMergerDeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TTCalHelixFinderDe:Negative" ]
    }

    TTCalHelixMergerUeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TTCalHelixFinderUe:Negative" ]
    }

    TTCalHelixMergerUeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TTCalHelixFinderUe:Positive" ]
    }

    TTCalHelixUCCMergerDeM : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TTCalHelixFinderUCCDe:Positive" ]
    }

    TTCalHelixUCCMergerDeP : {
      @table::TrkReco.producers.MergeHelices
      HelixFinders  : [ "TTCalHelixFinderUCCDe:Negative" ]
    }
  }
}

END_PROLOG
