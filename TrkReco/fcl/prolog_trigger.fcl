#include "TrkReco/fcl/prolog.fcl"
BEGIN_PROLOG

TrkRecoTrigger : { 

    TTrobustHelixFit : {
	@table::TrkReco.RobustHelixFit
    }


    producers : { 
# these module instance allows to remove the helix duplicates
# from the output of the helix finders.
# We need an instance for each track trigger sequence
	TTHelixMergerUeM : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TThelixFinder:Negative" ]
	}	

	TTHelixMergerUeP : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TThelixFinder:Positive" ]
	}	

	TTHelixMergerDeM : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TThelixFinder:Positive" ]
	}	

	TTHelixMergerDeP : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TThelixFinder:Negative" ]
	}	

	TTHelixUCCMergerDeM : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TThelixFinderUCC:Positive" ]
	}	

	TTHelixUCCMergerDeP : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TThelixFinderUCC:Negative" ]
	}	

	TTCalHelixMergerDeM : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TTCalHelixFinderDe:Positive" ]
	}	

	TTCalHelixMergerDeP : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TTCalHelixFinderDe:Negative" ]
	}

	TTCalHelixUCCMergerDeM : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TTCalHelixFinderUCCDe:Positive" ]
	}	

	TTCalHelixUCCMergerDeP : {
	    module_type : MergeHelices
	    HelixFinders  : [ "TTCalHelixFinderUCCDe:Negative" ]
	}	
    }
}

END_PROLOG
