
           Release notes for Mu2e Offline software, v0_2_8


49) December 12, 2010 logash

    1. Renamed CaloCrystalHitMCTruth to CaloCrystalOnlyHit, to 
       avoid confusion. All *MCTruth objects suppose to hold 
       MC information about corresponding object, e.g. 
       CaloHitMCTruth holds MC data (energy deposition, for example)
       for the corresponding CaloHit objects. This was not true 
       for CaloCrystalHitMCTruth. CaloCrystalHit is a crystal hit, 
       reconstructed from corresponding APD hits (CaloHit), but 
       CaloCrystalHitMCTruth is a crystal hit, created directly from 
       G4 steps only in the crystal (and not in corresponding APDs), 
       independent on corresponding APD hits.

    2. It is now possible to provide list of B-field maps, e.g. instead
       of this in the config file:

  string bfield.dsFile  = "BFieldMaps/G4BL_v0/Mu2e_Rotated_Coils_DSMap.txt";
  string bfield.psFile  = "BFieldMaps/G4BL_v0/Mu2e_Rotated_Coils_PSMap.txt";
  string bfield.tsuFile = "BFieldMaps/G4BL_v0/Mu2e_Rotated_Coils_TSuMap.txt";
  string bfield.tsdFile = "BFieldMaps/G4BL_v0/Mu2e_Rotated_Coils_TSdMap.txt";

       one can use:

  vector<string> bfield.files = {
	       "BFieldMaps/G4BL_v0/Mu2e_Rotated_Coils_DSMap.txt",
	       "BFieldMaps/G4BL_v0/Mu2e_Rotated_Coils_PSMap.txt",
	       "BFieldMaps/G4BL_v0/Mu2e_Rotated_Coils_TSuMap.txt",
	       "BFieldMaps/G4BL_v0/Mu2e_Rotated_Coils_TSdMap.txt"
  };

       Old style works as well, but if bfield.files is present in the 
       config file, the old parameters like bfield.dsFile are ignored. 

       This works only for G4BL format of the field maps!

48) December 10, 2010 logash

    Added ability to do beamline simulation in several stages.
    1. New run-time parameter of ReadVirtualDetector_plugin:
         saveVD  = mu2e.untracked.vint32(7,8)
       that allows to specify list of virtuat detector, from 
       which the data will be saved to the ntuple. By default
       data from all virtual detectors is saved.
    2. New configuration parameter of FromG4BLFile generator:
          bool   fromG4BLFile.targetFrame  = false;
       that allows to specify if what frame the particle position
       is defined in the input file. True value means that position 
       is defined in the local frame of the production target; false 
       value means the position is defined in Mu2e frame.
    3. Add new script makeGeneratorFile.py, which can read virtual 
       detector ntuple and produce data file which can be used by 
       FromG4BLFile generator.

    For example, it is now possible to start from protons and save all 
    electrons above certain momentum as they enter to DS. Then the
    separate simulation can use these electrons as input.

    Updated files:

       EventGenerator/inc/FromG4BLFile.hh
       EventGenerator/src/FromG4BLFile.cc
       Mu2eG4/src/ReadVirtualDetector_plugin.cc

    New files:

       Mu2eG4/test/makeGeneratorFile.py

47) December 10, 2010 kutschke
    Add the DetectorSystem object to the GeometryService
      GeometryService/src/GeometryService.cc

46) December 10, 2010 kutschke
    New data product to hold information about the status of G4 for each event.
     ToyDP/inc/StatusG4.hh   
     ToyDP/src/StatusG4.cc

    Tell root persistency about these new classes:
       ToyDP/src/classes.h
       ToyDP/src/classes_def.xml

    Fill the new class and add it to the event
       Mu2eG4/src/G4_plugin.cc

    Add StatusG4 to the standard example
       Mu2eG4/src/ReadBack.cc

    Modifications needed to access information that was put into StatusG4.
       Mu2eG4/inc/Mu2eG4RunManager.hh
       Mu2eG4/inc/SteppingAction.hh
       Mu2eG4/src/SteppingAction.cc 
       Mu2eG4/inc/TrackingAction.hh
       Mu2eG4/src/TrackingAction.cc

45) December 9, 2010 kutschke
    Added some new accessors 
      Mu2eUtilities/inc/SimParticleInfo.hh
      Mu2eUtilities/inc/SimParticlesWithHits.hh

    Fixed the printInfo method, in the end of track section, for the case that the 
    SimParticle does not exist in the transient map; this can happen when the
    transient map has reached its maximum size.
       Mu2eG4/src/TrackingAction.cc

44) December 7, 2010 logash

    1. Added information about parent particle to particles ntuple 
       (ntpart), produced by ReadVirtualDetector_plugin. That enables 
       range of beamline studies, like comparison between different
       pion production models, calculation of the weights,...

    2. Rewrote construction of weird-shaped collimator 3. It is now 
       constructed exactly as described in the MECO design (docdb 853).
       The following new parameters in geom_01.txt define the shape 
       and position of the hole in the collimator:
	   double coll3.holeRadius       = 150.0;
	   double coll3.holeHalfHeight   = 100.0;
	   double coll3.holeDisplacement = 90.0;
       Function nestExtrudedSolid is not used anymore.

    3. Fixed problem with volume overlaps between virtual detectors 
       and collimators, and collimator 3 and vacuum chamber.

    Updated files:

      Mu2eG4/src/Mu2eWorld.cc
      Mu2eG4/src/ReadVirtualDetector_plugin.cc
      Mu2eG4/test/geom_01.txt

43) December 7, 2010 genser

    Used the new nestTubs and nestTrp instead of explicit G4 classes;
    Used AntiLeakRegistry for G4RotationMatrix objects

      Mu2eG4/src/Mu2eWorld.cc
      Mu2eG4/src/constructLTrackerv3.cc
      Mu2eG4/src/constructTTrackerv3.cc

42) December 6, 2010 genser

    Modified/added free mest... functions: nestTorus, nestCons,
    nestExtrudedSolid similar to the previously changed nestTubs;
    Removed nestTorus2, nestCons2, nestExtrudedSolid2 from Mu2eWorld
    and used the new free functions instead; used finishNesting more;
    Added optional printout in finishNesting depending on the verbose flag;

      Mu2eG4/inc/Mu2eWorld.hh
      Mu2eG4/inc/finishNesting.hh
      Mu2eG4/inc/nestCons.hh
      Mu2eG4/inc/nestExtrudedSolid.hh
      Mu2eG4/inc/nestTorus.hh
      Mu2eG4/src/Mu2eWorld.cc
      Mu2eG4/src/finishNesting.cc
      Mu2eG4/src/nestCons.cc
      Mu2eG4/src/nestExtrudedSolid.cc
      Mu2eG4/src/nestTorus.cc
      Mu2eG4/src/nestTubs.cc

41) December 3, 2010 onoratog
    In particle generator modules, all the histograms related to time
    generation have now a lower bound set to -200 ns. This has been made 
    in order to include future changes that will shift t=0 at the middle
    of the proton bunch and so will include also negative time.
    
40) December 2, 2010 onoratog
    Modified BkgRates_plugin.cc. For the Tracker ntupla: now each entry is
    a StrawHit. The first three StepPointMC with higher energy deposition
    are stored with pdgId and trackId informations. Position of the hit along
    the wire is calculated using time difference among straw head and tail 
    signal. Also MCTruth information is stored to compare the two values.
    For the Calorimeter ntupla: each entry is a Crystal hit. Now also MC info
    about track who made the hit is stored.

39) December 2, 2010 kutschke
    Add a geometry manager class to define the detector
    coordinate system.  This is not yet fully working and
    does not modify existing code.
      GeometryService/inc/DetectorSystem.hh 
      GeometryService/src/DetectorSystemMaker.cc 
      GeometryService/src/DetectorSystemMaker.hh

    Add a new parameter needed by the above:
      Mu2eG4/test/geom_01.txt

38) December 2, 2010 genser

    Introduced finishNesting an auxiliary function for
    nest... functions factorizing out common code;
    Unified nestBox and nestTrp with recently changed nestTubs;
    Removed nestBox and nestTubs2 from Mu2eWorld and used the new free
    functions instead;
    Used the new nestBox & nestTrp in constructLTrackerv3 & constructCalorimeter;
    Renamed Vane to CalorimeterVane_ to disambiguate from LTracker vane

      Mu2eG4/inc/Mu2eWorld.hh
      Mu2eG4/inc/finishNesting.hh
      Mu2eG4/inc/nestBox.hh
      Mu2eG4/inc/nestTrp.hh
      Mu2eG4/inc/nestTubs.hh
      Mu2eG4/src/Mu2eWorld.cc
      Mu2eG4/src/constructCalorimeter.cc
      Mu2eG4/src/constructLTrackerv3.cc
      Mu2eG4/src/finishNesting.cc
      Mu2eG4/src/nestBox.cc
      Mu2eG4/src/nestTrp.cc
      Mu2eG4/src/nestTubs.cc

37) November 30, 2010 kutschke
    Previously ToyGenParticle was just a struct with public data.  This confused people.
    So I have written accessor methods and have changed all of the code that uses
    ToyGenParticle to use them.  For now I have left the data public, for backwards
    compatibility, but it will soon become private.
      ToyDP/inc/ToyGenParticle.hh

    The modified code is:
      Analyses/src/BkgRates_plugin.cc
      Analyses/src/FilterEmptyEvents_plugin.cc
      Mu2eG4/src/ConvElecUtilities.cc
      Mu2eG4/src/CosmicTuple.cc
      Mu2eG4/src/G4_plugin.cc
      Mu2eG4/src/PrimaryGeneratorAction.cc
      Mu2eG4/src/ReadBack.cc
   
36) November 30, 2010 kutschke
    Mu2eUtilities/src/SimParticleAncestors.cc 
    Mu2eUtilities/inc/SimParticleAncestors.hh
    New class to trace ancestry of a SimParticle.

35) November 30, 2010 genser

    Used of G4Helper AntiLeakRegistry and addVolInfo in
    constructLTrackerv3.cc, constructTTrackerv3.cc, nestTubs etc...
    Extended nestTubs parameter list for a cleaner interface
    Moved/added setting the VolumeInfo name for Trackers and Targets outside of Mu2eWorld.cc
    Added ltracker and ttracker verbosityLevel

      Mu2eG4/inc/nestTubs.hh
      Mu2eG4/src/Mu2eWorld.cc
      Mu2eG4/src/constructDummyStoppingTarget.cc
      Mu2eG4/src/constructDummyTracker.cc
      Mu2eG4/src/constructLTrackerv3.cc
      Mu2eG4/src/constructStoppingTarget.cc
      Mu2eG4/src/constructTTrackerv3.cc
      Mu2eG4/src/nestTubs.cc
      Mu2eG4/test/ltracker_v0.txt
      Mu2eG4/test/ttracker_v0.txt


34) November 29, 2010 logash

    1. Classes StrawHitMCPtr and StrawHitMCPtrCollection are replaced 
       with more generic DPIndexVector and DPIndexVectorCollection. 
       Code which uses StrawHitMCPtr is changed correspondingly.
       Class interface hasn't changed.

    2. Two more DPIndexVectorCollections are produced in MakeCaloReadoutHits,
       which provide links from CaloHitMCTruth to original G4 steps 
       (StepPointMCs). "CaloHitMCCrystalPtr" collection points to G4 steps 
       with energy deposition in the crystal, saved in StepPointMCCollection
       named "calorimeter". "CaloHitMCReadoutPtr" collection points to G4 
       steps with energy deposition in the APD, saved in StepPointMCCollection
       named "calorimeterRO". Using these collections one can propagate back 
       from calorimeter hit to original Monte-Carlo data.

       There is example in ReadBack.cc, which shows how to propagate back to 
       G4 steps.

    3. Since now there are 3 DPIndexVectorCollections produced in simulation,
       in order to access them, one needs to add additional agrument to 
       getByLabel. Use the following code to access these collections:

       edm::Handle<DPIndexVectorCollection> mcptrHandle;
       // Pointers from StrawHitMCTruth to StepPointMCs, old StrawHitMCPtr
       evt.getByLabel("makeSH","StrawHitMCPtr",mcptrHandle);
       // Pointers from CaloHitMCTruth to "calorimeter" StepPointMCs
       evt.getByLabel("CaloReadoutHitsMaker","CaloHitMCCrystalPtr",mcptrHandle);
       // Pointers from CaloHitMCTruth to "calorimeterRO" StepPointMCs
       evt.getByLabel("CaloReadoutHitsMaker","CaloHitMCReadoutPtr",mcptrHandle);
     
    New Files:

      ToyDP/inc/DPIndexVector.hh
      ToyDP/inc/DPIndexVectorCollection.hh

    Files removed:

      ToyDP/inc/StrawHitMCPtr.hh
      ToyDP/inc/StrawHitMCPtrCollection.hh

    Files updated       

      Analyses/src/BkgRates_plugin.cc
      HitMakers/src/MakeCaloReadoutHits_plugin.cc
      HitMakers/src/MakeStrawHit_plugin.cc
      HitMakers/src/ReadStrawHit_plugin.cc
      Mu2eG4/src/Mu2eWorld.cc
      Mu2eG4/src/ReadBack.cc
      Mu2eG4/src/ReadBack.hh
      Mu2eG4/test/geom_01.txt
      Mu2eUtilities/inc/SimParticlesWithHits.hh
      Mu2eUtilities/inc/StrawHitMCInfo.hh
      Mu2eUtilities/src/SimParticlesWithHits.cc
      Mu2eUtilities/src/StrawHitMCInfo.cc
      ToyDP/src/classes.h
      ToyDP/src/classes_def.xml

33) November 29, 2010 logash

    More changed in calorimeter area: 

    1. G4_plugin now produces two collections of StepPointMCs: 
       "calorimeter" for hits with energy deposition in the crystal and
       "calorimeterRO" for hits with energy deposition in the readout
       (APD). The steps in CaloCollection are not duplicated for each APD.
       MakeCaloReadoutHits_plugin.cc uses both StepPointMCs collections to 
       generate calorimeter hits.
    2. The Mu2e coordinate system is used in both "calorimeter" and 
       "calorimeterRO" collections (before the local crystal frame was used).
       The transformation to local crystal frame is performed as needed 
       using Calorimeter geometry service (see example in 
       MakeCaloReadoutHits_plugin.cc).
    3. CaloCrystalSD and CaloReadoutSD are now truly independent sensitive 
       detectors.

    Updated files:

      Mu2eG4/src/G4_plugin.cc
      Mu2eG4/src/Mu2eWorld.cc
      Mu2eG4/src/constructCalorimeter.cc
      Mu2eG4/inc/CaloReadoutSD.hh
      Mu2eG4/src/CaloReadoutSD.cc
      Mu2eG4/inc/CaloCrystalSD.hh
      Mu2eG4/src/CaloCrystalSD.cc
      HitMakers/src/MakeCaloReadoutHits_plugin.cc

32) November 23, 2010 onoratog
    
    Added a plugin used to evaluate background rates in tracker and calorimeter. It is a first prototype and needs several upgrade to achieve the desired form.
    It is located in 
       Analyses/src/BkgRates_plugin.cc
    It uses a filter
       Analyses/src/FilterEmptyEvents_plugin.cc
    and it is executed by
       Analyses/test/BkgRatesCounter.py
    using the generator config file
       Analyses/test/genconfig_Bkg.txt


31) November 23, 2010 kutschke
    A new class that allows direct access to StrawHits arranged by which
    SimParticle create them.
       Mu2eUtilities/inc/SimParticlesWithHits.hh
       Mu2eUtilities/src/SimParticlesWithHits.cc

    Support classes for the above:
       Mu2eUtilities/inc/SimParticleInfo.hh
       Mu2eUtilities/src/StrawHitMCInfo.cc
       Mu2eUtilities/inc/StrawHitMCInfo.hh

    Add ToyDP as a link library; needed by the above
       Mu2eUtilities/src/SConscript

    An example of how to use the new class:
      Analyses/src/SimParticlesWithHitsExample_plugin.cc
      Analyses/test/simParticlesWithHitsExample.py
      Mu2eG4/test/multiDIO.txt

30) November 24, 2010 logash

    1. Refactoring of the code to produce calorimeter hits: G4_plugin now 
       creates yet another output collection of StepPointMCs, named 
       "CaloCollection". The calorimeter hits (CaloHit, CaloHitMCTruth, 
       CaloCrystalHitMCTruth) are how created in the separate plugin:

       HitMakers/src/MakeCaloReadoutHits_plugin.cc

       using StepPointMCs as input. This plugin should be added to execution
       chain between G4_plugin and MakeCaloCrystalHits_plugin.cc. The 
       algorithm itself of how hits are created didn't change. The code is 
       fully functioning and produces the same output collections as before 
       (when all of these was done in G4_plugin). 

       More changes in the same area are expected in near future. 

    2. Replaced addVirtualDetectorHits and addCalorimeterHits in Mu2eG4/ 
       with more generic copyStepPointG4toMC.

    New and updated files: 

     Mu2eG4/src/G4_plugin.cc
     HitMakers/src/MakeCaloReadoutHits_plugin.cc
     Mu2eG4/inc/copyStepPointG4toMC.hh
     Mu2eG4/src/copyStepPointG4toMC.cc
     Mu2eG4/test/g4test_03.py
     Mu2eG4/test/g4test_04.py
     Mu2eG4/test/runCosmic.py
     Mu2eG4/test/transportOnly.py

    Removed files:

     Mu2eG4/inc/addCalorimeterHits.hh
     Mu2eG4/src/addCalorimeterHits.cc
     Mu2eG4/inc/addVirtualDetectorPoints.hh
     Mu2eG4/src/addVirtualDetectorPoints.cc

29) November 21, 2010 genser

    Repalced Straw Gas with Straw Wall, Gas, Wire
    Replaced GeomHandle<Tracker> with Tracker const &
    Restored runability of LTracker in Mu2eWorld.cc
    Made protonabsorber constructable for both TT & LT tracker
    Changed protonabsorber parameters to be compatible with the new Mu2eWorld.cc
    Changed tracker plots to be compatible with Straws having a wall
      Mu2eG4/src/Mu2eWorld.cc
      Mu2eG4/src/StrawSD.cc
      Mu2eG4/src/constructLTrackerv3.cc
      Mu2eG4/src/constructTTrackerv3.cc
      Mu2eG4/src/ReadBack.cc
      Mu2eG4/test/geom_01.txt


28) November 17, 2010 kutschke
    Enable the storing of trajectories as data products.

    New files:
     ToyDP/inc/PointTrajectory.hh
     ToyDP/inc/PointTrajectoryCollection.hh
     Mu2eG4/inc/addPointTrajectories.hh
     Mu2eG4/src/addPointTrajectories.cc

    Modified files:
     Mu2eG4/inc/TrackingAction.hh
     Mu2eG4/src/G4_plugin.cc
     Mu2eG4/src/TrackingAction.cc
     ToyDP/src/classes.h
     ToyDP/src/classes_def.xml

    By default do not write out this new data product.
     Mu2eG4/test/g4test_03.py



27) November 16, 2010 kutschke
    Remove _volumeInfoList from Mu2eWorld and add equivalent functionality
    to G4HelperService.

26) November 15, 2010 kutschke
    Move some functions from the .hh to a newly created .cc.
    Refactor the .hh: add the findOrCreateList method.
      Mu2eG4/inc/AntiLeakRegistry.hh
      Mu2eG4/src/AntiLeakRegistry.cc 

    Create new Service to hold the AntiLeakRegistry.  It will also
    hold other things in the future.
      Mu2eG4/inc/G4Helper.hh 
      Mu2eG4/src/G4Helper_plugin.cc
 
    Remove anti leak registry from here:
      Mu2eG4/inc/Mu2eG4RunManager.hh

    Use anti-leak registry from the G4HelperService.
    Remove data members _visAttributes and  _stepLimits that are now obsolete.
       Mu2eG4/inc/Mu2eWorld.hh
       Mu2eG4/src/Mu2eWorld.cc

    Add GeometryService and ToyDP as link time dependencies. They should have been 
    there all along but got away with it until G4HelperService was created.
       Mu2eG4/src/SConscript

    Add G4HelperService
       Mu2eG4/test/beamline_01.py
       Mu2eG4/test/beamline_02.py
       Mu2eG4/test/g4test_01.py
       Mu2eG4/test/g4test_02.py
       Mu2eG4/test/g4test_03.py
       Mu2eG4/test/g4test_04.py
       Mu2eG4/test/replayAll.py
       Mu2eG4/test/replayWithSkip.py
       Mu2eG4/test/runCosmic.py
       Mu2eG4/test/runCosmicGraf.py
       Mu2eG4/test/transportOnly.py
       Mu2eG4/test/transportOnlyAndRoot.py  

25) November 15, 2010 genser

    applied surface check and config file driven visibility attributes
    to the new components in:
      Mu2eG4/src/constructCalorimeter.cc

24) November 15, 2010 genser

    replaced GeomHandle<Calorimeter> with Calorimeter const &
      HitMakers/src/MakeCaloCrystalHits_plugin.cc
      Mu2eG4/src/addCalorimeterHits.cc
      Mu2eUtilities/inc/sort_functors.hh

23) November 12, 2010 genser

    added makeSH and CaloCrystalHitsMaker to Mu2eG4/test/runCosmic.py

22) November 12, 2010 genser

    rewrote creation of CaloCrystalHitMCTruthCollection;
    added setEnergyDep to CaloCrystalHitMCTruth;
    introduced sort_functors.hh; 
    replaced roId() with id() in CaloHits and CaloHitsMCTruth
      Mu2eG4/src/addCalorimeterHits.cc
      Mu2eG4/src/ReadBack0_plugin.cc
      Mu2eG4/src/ReadBack.cc
      HitMakers/src/MakeCaloCrystalHits_plugin.cc
      ToyDP/inc/CaloCrystalHit.hh
      ToyDP/src/CaloCrystalHit.cc
      ToyDP/inc/CaloHitMCTruth.hh
      ToyDP/inc/CaloHit.hh
      ToyDP/inc/CaloCrystalHitMCTruth.hh
      ToyDP/src/CaloCrystalHitMCTruth.cc
      Mu2eUtilities/inc/sort_functors.hh

21) November 11, 2010 kutschke
    Removed some modifiers that are no longer needed.
      GeneralUtilities/inc/MapVector.hh
     
20) November 11, 2010 kutschke
    Created the AntiLeakRegistry class. Instantiated an object of that type
    in Mu2eG4RunManager and added an accessor for it.  This will be used to
    hold all G4 objects whose lifetime we need to manage ( ie things that would
    otherwise cause memory leaks ).
    Mu2eG4/inc/AntiLeakRegistry.hh
    Mu2eG4/inc/Mu2eG4RunManager.hh

19) November 11, 2010 genser

    Moved creation of CaloCrystalHitMCTruthCollection from
    MakeCaloCrystalHits_plugin to addCalorimeterHits;
    Added maximumEenergy cut and improved energy reconstruction algorithm;
    Changed handling of direct RO hits, added comments
    Simplified MakeCaloCrystalHits_plugin produce as it only creates one colletion now;
    Modified calorimetric histograms;
    Changed Id() to id() in CaloCrystalHit & CaloCrystalHitMCTruth;
    Added two functions to CaloCrystalHit; 
    Removed RO related info and functions from CaloCrystalHitMCTruth
      HitMakers/src/MakeCaloCrystalHits_plugin.cc
      Mu2eG4/inc/addCalorimeterHits.hh
      Mu2eG4/src/G4_plugin.cc
      Mu2eG4/src/ReadBack.cc
      Mu2eG4/src/addCalorimeterHits.cc
      ToyDP/inc/CaloCrystalHit.hh
      ToyDP/inc/CaloCrystalHitMCTruth.hh
      ToyDP/src/CaloCrystalHit.cc
      ToyDP/src/CaloCrystalHitMCTruth.cc
      ToyDP/src/CaloHitMCTruth.cc
      Mu2eG4/test/transportOnly.py
      Mu2eG4/test/g4test_03.py



18) November 10, 2010 kutschke
    The G4 internal run and event number match those of the framework event.
    Also removed some commented out obsolete code. 
      Mu2eG4/inc/Mu2eG4RunManager.hh
      Mu2eG4/src/Mu2eG4RunManager.cc
      Mu2eG4/src/G4_plugin.cc

17) November 10, 2010 kutschke
    Changes to match the switch from 0 based indices in item 16.

    The hit makers all reference the track that created them.  Fix indexing.
      Mu2eG4/src/CaloCrystalSD.cc 
      Mu2eG4/src/StrawSD.cc 
      Mu2eG4/src/VirtualDetectorSD.cc

    This class explicity wants to look for the first SimParticle in the event.
    So it needs to know about the switch to 1 based indexing.
    Analyses/src/RPC_plugin.cc


16) November 10, 2010 kutschke
    One big change and two small changes to: 
      Mu2eG4/src/TrackingAction.cc
      Mu2eG4/inc/TrackingAction.hh

    The big change:
       - In SimParticleCollection, IDs start at 1, not 0.
       - This matches G4's usage.  So an ID seen from the framework is the
         same as the G4 internal ID.

    The small changes:
       - Accumulate the map of SimParticles in a transient local map and copy to
         the SimParticleCollection at the end of the event.  This 
         anticipates the change of SimParticleCollection to something
         optimized for reading and persistency.
       - Add a dummy StoppingCode to the SimParticles.

    GeneralUtilities/inc/MapVector.hh 
       - Add a new insert method to support the filling of the SimParticleCollection
         from the transient local representation.

15) November 10, 2010 kutschke
    Define a new enum class to hold a code that describes why G4 stopped
    tracking a particle, decay, ranged out, capture, and so on.  Just
    a place holder for now.
      ToyDP/inc/StoppingCode.hh 
      ToyDP/src/StoppingCode.cc

    Add an instance of StoppingCode as a data member to SimParticle.
     ToyDP/inc/SimParticle.hh 
     ToyDP/src/classes_def.xml

14) November 9, 2010 onoratog
    Mu2eG4/inc/ConvElecUtilities.hh and Mu2eG4/src/ConvElecUtilities.cc have been 
    corrected to increase speed. 
    The trivial accessors have been moved to the .hh file, and the access to the simulated particle
    does not loop over all simParticles, asking for the trackId, but is given by a bare pointer
    to the particle itself. The reason of this change is the new type for SimParticleCollection (now it is a map).


13) November 9, 2010 kutschke
    With the changes in 12, there are problems building RootAnalyzer.
    I modified Offline/SConstruct to remove RootAnalyzer from the build.


12) November 9, 2010 kutschke
    Change the key_type in MapVector to a new class GeneralUtilities/inc/MapVectorKey.hh
    The purpose of this change is to cause compile time errors when SimParticleCollection
    is used in a way that will produce incorrect results. This also requires the appropriate
    changes to classes_def.xml and classes.h.  A side effect is that, in the classes 
    SimParticle and StepPointMC the trackId data members, and their accessors, and input 
    arguments must change to this new type.  A next order side effect is that code that gets 
    trackIds from these classes must change variables to use this newbel("makeSH","StrawHitMCPtr",mcptrHandle);
       // Pointers from CaloHitMCTruth to "calorimeter" StepPointMCs
       evt.getByLabel("CaloReadoutHitsMaker","CaloHitMCCrystalPtr",mcptrHandle);
       // Pointers from CaloHitMCTruth to "calorimeterRO" StepPointMCs
       evt.getByLabel("CaloReadoutHitsMaker","CaloHitMCReadoutPtr",mcptrHandle);qZZ type. The bulk of the 
    changes are of this last type.

    Much of the code that accesses this information in the event contains the line:

    typedef SimParticleCollection::key_type key_type;

    Perfer to use this, rather than using MapVectorKey directly, so that any future changes will
    require less maintenance.

    There was a lot of code like:  
      if ( sim.parentId() > -1 ) ..

    Prefer instead to use:
      if ( sim.hasParent() ) ...

    This makes the code more clear and, if all of the code had been written this way, about 
    half of the changes below would not have been more required.

    New file:
      GeneralUtilities/inc/MapVectorKey.hh
     
    Change key type and persistency info:
      GeneralUtilities/inc/MapVector.hh
      ToyDP/src/classes.h
      ToyDP/src/classes_def.xml

    Change type of data members and types returned by accessors.  These now return their
    information as type MapVectorKey, so that it can be used directly in operator [].
       ToyDP/inc/SimParticle.hh
       ToyDP/inc/StepPointMC.hh

    This is the code that fills the SimParticleCollection from G4.
       Mu2eG4/src/TrackingAction.cc

    These are analysis codes that needed to be changed to use the new system:
       Analyses/src/CEL_plugin.cc
       Analyses/src/Histforpabs_plugin.cc
       Analyses/src/RPC_plugin.cc
       HitMakers/src/ReadStrawHit_plugin.cc
       HoughTransform/src/HoughTest_plugin.cc
       HoughTransform/src/HoughTuner_plugin.cc
       Mu2eG4/inc/ConvElecUtilities.hh
       Mu2eG4/inc/StepPointG4.hh
       Mu2eG4/src/CosmicTuple.cc
       Mu2eG4/src/ReadBack.cc
       Mu2eG4/src/ReadVirtualDetector_plugin.cc
       Mu2eG4/src/StepPointG4.cc
       RootAnalyzer/src/Analyzer.C
       RootAnalyzer/src/Analyzer.h

11) November 9, 2010 kutschke
    Remove some debug printout from some SConscript files:
     GeometryService/src/SConscript
     ConditionsService/src/SConscript
     Mu2eG4/src/SConscript
     Mu2eReflection/src/SConscript

10) November 8, 2010 kutschke
    GeneralUtilities/inc/MapVector.hh
      Add the findOrNull methods ( const and non-const):
      These are needed since the combination of calling has(id) and then at(id)
      does the lookup twice.  Also, I cannot return a std::pair<bool,SimParticle&>.
      So go with the traditional pointer return.  This was needed by CosmicTuple.

9) November 8, 2010 kutschke
   Rewrite loops over SimParticles to be correct with the new SimParticleCollection class.
     Mu2eG4/src/ConvElecUtilities.cc
     Analyses/src/CEL_plugin.cc
     Analyses/src/Histforpabs_plugin.cc
     Analyses/src/RPC_plugin.cc
     KalmanTests/src/KalmanT01_plugin.cc
     Mu2eG4/src/ReadVirtualDetector_plugin.cc
     Mu2eG4/src/CosmicTuple.cc


8) November 8, 2010 kutschke
   Switch SimParticleCollection to be a MapVector

     ToyDP/inc/SimParticleCollection.hh
       - redefine the type .

     Mu2eG4/src/G4_plugin.cc
       - Pass data product reference at the start of the event, not the end.

     Mu2eG4/inc/TrackingAction.hh
     Mu2eG4/src/TrackingAction.cc
       - Major rewrite.  No longer need a transient map.  Fill the data product
         directly during the course of the event.
       - Add consistency check that will be run at the end of the event
         if debugging is enabled.

     Mu2eG4/src/ReadBack.cc
       - A few syntax changes needed for the new type.
 
7) November 8, 2010 kutschke
   ToyDP/inc/SimParticle.hh
     - Remove superfluous include

6) November 8, 2010 kutschke
   If I want to create a data product of type mu2e::MapVector<T>
   I must add lines for std::pair<uint32_t,T> and std::map<uint32_t,T> to both:
      ToyDP/src/classes.h
      ToyDP/src/classes_def.xml
   for each concrete class T that might be added to the event.  This was done for
   T=SimParticle, in preparation for step 7.

5) November 8, 2010 kutschke
   GeneralUtilities/inc/MapVector.hh
   The version committed today is the first properly working version.
   The three big changes were that swap was missing a template parameter in its argument list,
   that erase was missing a return statement and that one of the insert methods required a
   templated argument type:

   template <class InputIterator>
   iterator insert ( InputIterator position, const value_type& value ){

   Also fixed a lot of typos.

4) November 5, 2010 kutschke
   GeneralUtilities/inc/MapVector.hh
   GeneralUtilities/test/testMapVector1.cc
     First versions.  Not yet working and not used by any code.

3) November 5, 2010 kutschke
   Create printout to be used to check that the beamline behaviour is unchanged when it is
   supposed to be unchanged.  
    Mu2eG4/src/ReadVirtualDetector_plugin.cc
      - Add optional printout that can be enabled at run time.
    Mu2eG4/test/beamline_02.py 
      - New file. The same as beamline_01.py but with no graphics and with printout.
    Mu2eG4/test/beamline_02.py 
      - Default event generator is the G4BeamlineGenerator.
    Mu2eG4/test/beamline_geom.txt
      - Since beamline_genconfig.txt defaults to G4BL input.  Make this default too.
      - Also change the settings for the particle gun.

2) November 5, 2010 kutschke
   The data member _hallOriginInMu2e was incorrectly redefined in the method constructSteel.
   All that is needed is to use a local data member.
   The error was introduced when constructSteel was first created.  
      Mu2eG4/src/Mu2eWorld.cc

1) November 4 2010, onoratog

   FoilParticleGenerator now has three different enum types.
   They identify the random generator algorithms for foil extraction,
   position extraction and time extraction. 
   Moreover each different random extraction has its own method, which
   is called in a case statement within the method "generatePositionAndTime". 
   The random algorithms to be used are required in the c'tor, now.
   Generators that use the FPG class have been adapted to the new
   syntax.

