// Visualize field map regions and overlay arbitrary boxes of
// specified size and color on Mu2e geometry.
//
// Original author Andrei Gaponenko

//================================================================
// Visualization of magnetic field map regions
bool visregions.innerFieldMaps.visible  = false;
bool visregions.innerFieldMaps.solid    = false;
string visregions.innerFieldMaps.material = "G4_AIR";

// The color vectors should be non-empty and of the same size.  If
// there are more field maps than defined colors, the colors are
// re-used.  If there are more colors, the extra ones are ignored.
vector<double> visregions.innerFieldMaps.color.red =   { 1.0, 0.5, 0.8, 0.6, 1.0, 0.5, 0.8, 0.6};
vector<double> visregions.innerFieldMaps.color.green = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
vector<double> visregions.innerFieldMaps.color.blue =  { 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5};

// If squashY is defined, the Y coordinate of all field maps is
// ignored and the squashY values {Ymin, Ymax} are used instead.
vector<double> visregions.innerFieldMaps.squashY = { -2, 2 };

//================================================================
// Visualization of magnetic field map regions
bool visregions.outerFieldMaps.visible  = false;
bool visregions.outerFieldMaps.solid    = false;
string visregions.outerFieldMaps.material = "G4_AIR";

// The color vectors should be non-empty and of the same size.  If
// there are more field maps than defined colors, the colors are
// re-used.  If there are more colors, the extra ones are ignored.
vector<double> visregions.outerFieldMaps.color.red =   { 0.0, 0.0, 0.0, 1.0};
vector<double> visregions.outerFieldMaps.color.green = { 1.0, 0.0, 1.0, 0.0};
vector<double> visregions.outerFieldMaps.color.blue =  { 0.0, 1.0, 1.0, 1.0};

// If squashY is defined, the Y coordinate of all field maps is
// ignored and the squashY values {Ymin, Ymax} are used instead.
vector<double> visregions.outerFieldMaps.squashY = { -1, 1 };

//================================================================
// Add a set of arbitrary boxes.
// All coordinates are in mu2e system.

bool visregions.boxes.visible = false;
bool visregions.boxes.solid  =  false;

// Material may affect how the box is shown in a viewer, thus make is configurable
string visregions.boxes.material = "G4_AIR";

// The color vectors should be non-empty and of the same size.  If
// there are more field maps than defined colors, the colors are
// re-used.  If there are more colors, the extra ones are ignored.
vector<double> visregions.boxes.color.red =   { 0.6, 0.5, 0.0, 0.00 };
vector<double> visregions.boxes.color.green = { 1.0, 0.8, 1.0, 0.80 };
vector<double> visregions.boxes.color.blue =  { 1.0, 1.0, 0.7, 0.95 };

// All of the following vectors should be of the same size == number of defined boxes.

// 1: PS-to-beam-dump region
// 2: ExtMonFNAL filter region
// 3: ExtMonUCI region
// 4: around-PS map
vector<double> visregions.boxes.xmin = {    4., -796, 3004,     4 };
vector<double> visregions.boxes.xmax = { 7204., 3004, 7204, +7204 };

vector<double> visregions.boxes.ymin = { 0., 0.,  0., 0.};
vector<double> visregions.boxes.ymax = { 1., 1.,  1., 1.};

vector<double> visregions.boxes.zmin = {-14929,  -20929, -22129., -9929. };
vector<double> visregions.boxes.zmax = { -9929,  -14929, -14929., +3071. };

//================================================================
int visregions.verbosityLevel = 0;

//================================================================
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
