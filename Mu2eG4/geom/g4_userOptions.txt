// Write mu2e geometry into a GDML file
bool   writeGDML        = false;
string GDMLFileName     = "mu2e.gdml";
//
//-----------------------
// Physics lists
//-----------------------
string g4.physicsListName = "Minimal";
double g4.minRangeCut     = 0.01;  // mm

bool   g4.printPhysicsProcessSummary = false;

// Some G4 controls which does not allow it to consume all the memory
// or to spend all the time tracking one bad particle
int g4.steppingActionMaxSteps = 10000;
int g4.stepsSizeLimit = 10000;

// Uncomment to enable debug printout on a per event or per track basis.
//vector<int> g4.steppingActionEventList = { 0, 1 };
//vector<int> g4.steppingActionTrackList = { 1 };
//vector<int> g4.strawSDEventList        = { 0, 1, 2, 3 };
//vector<int> g4.itgaslayerSDEventList   = { 0, 1, 2, 3 };
//vector<int> g4.trackingActionEventList = { 0, 1, 2, 3, 4, 5};

// Uncomment to suppress TrackingAction track end timing printout
//bool g4.printTrackTiming = false;

// Some G4 controls which does not allow it to consume all the memory
// or to spend all the time tracking one bad particle
int g4.particlesSizeLimit = 100000;

// Enable saving of trajectories for G4 graphics on a per track basis.
// Only save trajectories for tracks with momentum above this cut.
double g4.saveTrajectoryMomentumCut = 50.;

// Control saving of MCTrajectory information - replacement for PointTrajectory
double g4.mcTrajectoryMomentumCut = 50.;
int    g4.mcTrajectoryMinSteps    =  5;

// Control saving of PointTrajectory information - deprecated.
int    g4.pointTrajectoryMinSteps    =  5;

// The last point is saved regardless of the cuts.
double g4.mcTrajectoryDefaultMinPointDistance = 0.; // mm
// Per-volume cuts can override the global one above
//vector<string> g4.mcTrajectoryVolumes = { "DS2Vacuum", "DS3Vacuum"};
//vector<double> g4.mcTrajectoryVolumePtDistances = { 10., 10. };

// If the following number is not zero, G4 will kill all particles alive
// at that time.
double g4.steppingActionMaxGlobalTime = 0; //ns

// The information (location, momentum) of all particles will be
// recorded in the output files for particular moments in time
//vector<double> g4.steppingActionTimeVD = { 500, 700, 1000 }; //ns

// Enable/disable code that kills uninteresting tracks in SteppingAction,
// Put a list of G4 volume names where the tracks should be killed,
// for example { "HallAir" }.
vector<string> g4SteppingAction.killInTheseVolumes = {};
bool   g4SteppingAction.killerVerbose = false;

// Do not stack neutrinos
vector<int> g4.stackingActionDropPDG = { 12, -12, 14, -14, 16, -16 };

// These are used in both SteppingAction and StackingAction.
bool   g4.killLowEKine  = false;
double g4.eKineMin      = 0.0;    // Kinetic energy in MeV

// One can set this limit particle-specific:
// vector<int>    g4.killLowEKinePDG = {211, -211,   13,  -13,   11,  -11};
// vector<double> g4.eKineMinPDG     = {9.0,  9.0, 20.0, 20.0, 95.0, 95.0};

// This setting is used for special studies (stored muons)
// bool g4.killPitchToLowToStore = false;

// Enable the Mu2e written version of the decay of muonic atoms.
bool g4.doMuMinusConversionAtRest = false;

// Define the value of B(pi-> e nu).
// The allowed values are: { PDG, All, None, nnnnnn } where nnnnnn is any numerical value in the range [0,1]
string g4.PiENuPolicy          = PDG;
int    g4.PiENuPolicyVerbosity = 0;

// List of PDG ids of particles for which to switch off decay.
vector<int> g4.noDecay = {};

// Enable the code to kill low p secondaries from cosmics.
bool g4.doCosmicKiller = false;
double g4.cosmicPcut = 0.;
double g4.yaboveDirtYmin = 0.;

// current G4 stepper choices are shown below, extend Mu2eWorld.cc if more are needed
// G4ClassicalRK4
// G4ImplicitEuler
// G4ExplicitEuler
// G4SimpleRunge
// G4SimpleHeum
// G4HelixImplicitEuler
// G4HelixSimpleRunge
string g4.stepper = "G4ClassicalRK4";

// Control printout of element and material lists.
bool g4.printElements  = false;
bool g4.printMaterials = false;

int    world.verbosityLevel = 0;
bool   tracker.ActiveWr_Wl_SD    = false;   //Active the Sensitive Detector for the wires and straw wall.

//
//
// End notes:
//
// 1) Sources of information:
//
//
//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
