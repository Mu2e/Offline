//
// Root script to display some of the plots in made by ReadBack0_plugin.cc
// 
// 
// Original author Rob Kutschke
//
// This also serves as a introduction to root scripts for those who
// have not seen root.  It shows how to:
// 
// 1) Configure root to display underflows and overflows in the statistics box.
//
// 2) Change the default color of histograms.
//    
// 3) Retrieve histograms and ntuples from the file that was created
//    by readback0.py
//
// 4) Draw the histograms to the screen (called a canvas).
//
// 5) Split a canvas into multiple pads and draw a different histogram
//    in each pad.
//
// 6) Project scatter plots from ntuples.
//
// 7) Save the canvas in a format suitable for printing ( postscript )
//    or in a format suitable for inclusion in other documents
//    ( png, jpg, gif ).
//
// 8) Root documentation is available at: http://root.cern.ch
//
//

{

  // With this you can reinvoke the script without exiting root.
  gROOT->Reset();

  // Get rid of grey background (ugly for print out).
  gROOT->SetStyle("Plain");

  // Statistics box for histograms should include all of:
  // number of Entries, Mean, Rms, Underflows, Overflows
  gStyle->SetOptStat("emruo");

  // Make the histograms blue.
  gStyle->SetHistLineColor(kBlue);

  // This is needed to force the histogram line color to work.
  gROOT->ForceStyle();

  // Base name of input file and of all plot files.
  TString basename("readback0");

  // Open the input file that contains histograms and ntuples
  // made by ReadBack.cc
  TFile* file = new TFile( basename + ".root");

  // Name of the output postscript file.
  // Postscript is the only graphics format for which root supports multi-page output files.
  TString psfile( basename + ".ps");

  // Get pointers to some of the histograms that are in the input file.
  TH1F* hNstraw;        file->GetObject("checkhits/hNstraw",      hNstraw);
  TH1F* hStrawEDep;     file->GetObject("checkhits/hStrawEDep",   hStrawEDep);
  TH1F* hCrystalEDep;   file->GetObject("checkhits/hCrystalEDep", hCrystalEDep);
  TH1F* hNcrystal;      file->GetObject("checkhits/hNcrystal",    hNcrystal);

  // Get a pointer to the ntuple that is in the input file.
  TNtuple* nt; file->GetObject("checkhits/ntup",nt);

  // Open a new canvas on the screen.
  // The last two arguments are the size of the window, in pixels.
  TCanvas *canvas = new TCanvas("c", "Plots from " + basename, 900, 900 );

  // Open a multi-page output postscript file .
  canvas->Print( psfile+"[");

  // Split the canvas into 6 pads.
  canvas->Divide(2,3);

  // Draw some histograms, one per pad.
  // cd(n): move to graphics pad number "n".
  // "H9": draw outline histogram ("H") in high resolution mode (9)
  canvas->cd(1); hNstraw->DrawCopy("H9");
  canvas->cd(2); hStrawEDep->DrawCopy("H9");
  canvas->cd(3); hCrystalEDep->DrawCopy("H9");

  // Redraw the previous histogram but zoom the x axis.
  canvas->cd(4); 
  TH1* htmp = hCrystalEDep->DrawCopy("H9");
  htmp->GetXaxis()->SetRange(0,120);

  canvas->cd(5); hNcrystal->DrawCopy("H9");

  canvas->cd(6); nt->Draw("layer");

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the postscript file.
  canvas->Print(psfile);

  // Uncomment this line to save this canvas as a png file (slow)
  //canvas->Print( basename + "_1.png" );

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for page 2.
  canvas->cd(0);
  canvas->Clear();

  // Draw a y vs x scatter plot of the hit positions.
  // Let root choose all options.
  nt->Draw( "x:y","","");

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the postscript file.
  canvas->Print(psfile);

  // Uncomment this line to save this canvas as a jpg file.
  // canvas->Print( basename + "_2.jpg" );

  // Close the multi-page postscript file.
  canvas->Print(psfile+"]");

}
