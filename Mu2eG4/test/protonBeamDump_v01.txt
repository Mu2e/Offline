// Proton beam dump parameters.
// See mu2e docdb #948 and #1944
//
// Andrei Gaponenko, 2011

bool           hasProtonBeamDump = true;

string         protonBeamDump.material.core  = "G4_Al";
string         protonBeamDump.material.shielding = "ShieldingConcrete";
string         protonBeamDump.material.air = "G4_AIR";

bool           protonBeamDump.dirtVisible = false;
bool           protonBeamDump.dirtSolid   = false;
bool           protonBeamDump.logicalEnclosureVisible = true;
bool           protonBeamDump.logicalEnclosureSolid   = false;
bool           protonBeamDump.coreVisible = true;
bool           protonBeamDump.coreSolid   = true;
bool           protonBeamDump.mouthVisible = true;
bool           protonBeamDump.mouthSolid   = false;
bool           protonBeamDump.neutronCaveVisible = true;
bool           protonBeamDump.neutronCaveSolid   = false;
bool           protonBeamDump.magnetPitVisible = true;
bool           protonBeamDump.magnetPitSolid   = false;
bool           protonBeamDump.applyROOTVisualizationKludge = false;

// Sizes below are given in mm in this order:
//  {horizontal transverse to beam, vertical, horizontal along beam}
vector<double> protonBeamDump.coreHalfSize  = { 750., 750., 1000.};
// Beam entrance.
vector<double> protonBeamDump.mouthHalfSize = {750., 750., 500.};
// Neutron cave
vector<double> protonBeamDump.neutronCaveHalfSize = {1250., 1250., 500.};

// shielding around the core
double         protonBeamDump.minCoreShieldingThickness = 1000.;

//----------------------------------------------------------------
// Dump core positioning:  numbers from the spreadsheet
// "20120221 Facility data for MARS.xlsx"
// for Dump_Aluminum:
//
//  position = 413.1   529  -20399.4
// angle = 13.779, core full size { 1500, 1500, 2000. }
//
// Translated from MARS to G4 convention:
//
vector<double> protonBeamDump.coreCenterInMu2e = {651.3,  529., -19428.2};
double         protonBeamDump.coreRotY = 13.78; // degrees

//----------------------------------------------------------------
// The extinction monitor filter channel

// the first collimator
double         extMonFilter.collimator1.horizontalLength = 4000.;
// Upstream and downstream halfs may have different transverse sizes.
//
// The air channel {upstream size, downstream size}
vector<double> extMonFilter.collimator1.channelWidth  = {50., 50.};
vector<double> extMonFilter.collimator1.channelHeigh  = {50., 50.};
// the alignment plug:
vector<double> extMonFilter.collimator1.alignmentPlugRadius = { 100, 177.8  };
vector<double> extMonFilter.collimator1.alignmentHoleRClearance = { 12.7, 12.7 };
double extMonFilter.collimator1.radiusTransitiondZ = 0;

// The entrance point on the face of the beam dump enclosure,
// transverse to the beam coordinates (horiz, vertical).  The offsets
// are w.r.t to the core center position (== the nominal beam entrance
// point).
double         extMonFilter.entranceOffsetX = 50;
double         extMonFilter.entranceOffsetY = 1250;

// Filter channel orientation: angles in horizontal and vertical
// planes w.r.t dump core. Note that angleH is the same for all filter
// elements, while angleV is different.  We specify angleV at the
// filter entrance.
double         extMonFilter.angleH = 0.; //radians
double         extMonFilter.entranceAngleV = 0.1655; //radians

bool extMonFilter.collimator1.alignmentHole.visible = true;
bool extMonFilter.collimator1.alignmentHole.solid = false;
bool extMonFilter.collimator1.alignmentPlug.visible = true;
bool extMonFilter.collimator1.alignmentPlug.solid = false;
bool extMonFilter.collimator1.channel.visible = true;
bool extMonFilter.collimator1.channel.solid = true;

//----------------------------------------------------------------
// The second collimator

double         extMonFilter.collimator2.horizontalLength = 3000.;
// the downstream half of the channel is wider
vector<double> extMonFilter.collimator2.channelWidth  = {50., 75.};
vector<double> extMonFilter.collimator2.channelHeigh  = {50., 75.};
// the alignment plug:
vector<double> extMonFilter.collimator2.alignmentPlugRadius = { 100, 177.8  };
vector<double> extMonFilter.collimator2.alignmentHoleRClearance = { 12.7, 12.7 };
double extMonFilter.collimator2.radiusTransitiondZ = 0;

bool extMonFilter.collimator2.alignmentHole.visible = true;
bool extMonFilter.collimator2.alignmentHole.solid = false;
bool extMonFilter.collimator2.alignmentPlug.visible = true;
bool extMonFilter.collimator2.alignmentPlug.solid = false;
bool extMonFilter.collimator2.channel.visible = true;
bool extMonFilter.collimator2.channel.solid = true;

//----------------------------------------------------------------
// The filter magnet room: (horiz tranverse, vertical, along beam)
// The vertical position of the room is such as to leave the minimal required
// shielding thickness above the dump core.
// Sizes from Peter Kasper:
vector<double> extMonFilter.magnetPitHalfSize = {1524., 1371.5, 2100.};

// The magnet
vector<double> extMonFilter.magnet.outerHalfSize = {95., 150., 1778. }; // mm
double extMonFilter.magnet.apertureWidth  =  50.; // mm
double extMonFilter.magnet.apertureHeight = 100.; // mm
string extMonFilter.magnet.material  = "G4_Fe";
double extMonFilter.magnet.fieldStrength = 0.222; // Tesla

bool extMonFilter.magnet.iron.visible = true;
bool extMonFilter.magnet.iron.solid = false;
bool extMonFilter.magnet.aperture.visible = true;
bool extMonFilter.magnet.aperture.solid = true;

// The magnet is positioned so that a positive particle with
// the nominal momentum given below, travelling at the bottom of
// collimator1 channel (at exit) parallel to the collimator1 axis,
// will enter the magnet aperture at the bottom and exit at at the
// bottom after being deflected by the magnetic field.
double extMonFilter.nominalMomentum = 4000.; // MeV/c
// double extMonFilter.maxG4StepLength = 10.; // mm

int protonBeamDump.verbosityLevel = 0;

// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
