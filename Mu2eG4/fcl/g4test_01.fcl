#
# Generate a single conversion electron, run it through G4
# and draw a picture in the (x,y) view.  Do only one event.
#

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"

# Give this job a name.
process_name : G4Test01

# Start form an empty source
source : {
  module_type : EmptyEvent
  maxEvents : 1
}

services : {
  message               : @local::default_message
  TFileService          : { fileName : "g4test_01.root" }
  RandomNumberGenerator : {defaultEngineKind: "MixMaxRng"}

  GeometryService        : { inputFile      : "Mu2eG4/geom/geom_common.txt" }
  ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"  }
  GlobalConstantsService : { inputFile : "Mu2eG4/test/globalConstants_01.txt" }
  G4Helper               : { }
  SeedService            : @local::automaticSeeds

}

physics : {

  producers: {

    # Generate Event
    generate: @local::CeEndpointGun

    # Run G4 and add its output to the event.
    g4run : @local::g4run

  }

  p1 : [ generate, g4run ]

  trigger_paths  : [p1]

}

// This loads faster than the default physics list
physics.producers.g4run.physics.physicsListName: "QGSP_BERT"

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.SeedService.baseSeed         :  8
services.SeedService.maxUniqueEngines :  20

// Enable G4 graphics with the xy view.
physics.producers.g4run.visualization.initMacro : "Mu2eG4/test/visxz.mac"
