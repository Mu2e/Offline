# Configuration file for G4Test03
#
#  - Generate 200 events including one conversion electron plus
#    some number of background processes.
#  - Run these through G4.
#  - No event display.
#  - Form StrawHits from StepPointMC objects
#  - Write event data to an output file
#  - Save state of random numbers to the event-data output file
#
# $Id: g4BremTest.fcl,v 1.1 2014/08/29 16:16:17 knoepfel Exp $
# $Author: knoepfel $
# $Date: 2014/08/29 16:16:17 $

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"

# Give this job a name.
process_name : G4BremTest

#  module_type : EmptyEvent
#  maxEvents : 200
# Start form an empty source
source : {
  module_type : RootInput
  fileNames : ["/mu2e/data/tdr/beam/g4s2/tdr.beam.g4s2.ts3.1025a_1025a.12204850/good/00001/dataTS3ToDS23.root"]
  maxEvents : 10
}

services : @local::Services.Sim

physics : {

  producers: {
#
    # Generate the event
#    generate: @local::generate
#   generate: {
#     module_type          : EventGenerator
#     inputfile            : "Mu2eG4/test/genBrem_01.txt"
#   }


    # Run G4 and add its output to the event.
    g4run : @local::g4run

    # Form StrawHits (SH).
    makeSD : @local::makeSD
    makeSH : @local::makeSH

    @table::CaloDigiMC.producers
    @table::CaloReco.producers

    # Save state of the random number engines.
    randomsaver : @local::randomsaver

  }

  analyzers: {

    # Look at the StepPointMCs from virtualdetectors
    readvd: {
      module_type      : ReadVirtualDetector
      vdStepPoints     : virtualdetector
      savePDG          : [22]
      maxPrint         : 200
    }

    checkhits: {
      module_type            : ReadBack
      generatorModuleLabel   : generate
      g4ModuleLabel          : g4run
      caloReadoutModuleLabel : CaloShowerStepROFromShowerStep
      diagLevel              : 0
      minimumEnergy          : 0.000
      maxFullPrint           : 201
    }

    readStrawHits: {
      module_type      : ReadStrawHit
      recoModuleLabel : makeSH
      simModuleLabel : makeSD
      diagLevel        : 3
      maxFullPrint     : 100
    }

  }

  p1 : [g4run, makeSD, makeSH, @sequence::CaloDigiMC.DigiSim,@sequence::CaloReco.Reco, randomsaver ]
  e1 : [checkhits, readStrawHits, readvd, outfile]

  trigger_paths  : [p1]
  end_paths      : [e1]

}

outputs: {

  outfile : {
    module_type : RootOutput
    fileName    : "rhbob_data_03.root"
  }

}


services.TFileService.fileName : "rhbob_g4BremTest.root"

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20

// Enable diagnsotic printout for pedagogical purposes.
physics.producers.makeSH.diagLevel : 0
physics.producers.makeSH.maxFullPrint : 5
physics.producers.CaloReadoutHitsMaker.diagLevel : 0
physics.producers.CaloReadoutHitsMaker.maxFullPrint : 201
physics.producers.CaloCrystalHitsMaker.diagLevel : 0
physics.producers.CaloCrystalHitsMaker.maxFullPrint : 201

physics.producers.g4run.generatorModuleLabel    : ""
physics.producers.g4run.genInputHits            : [ "g4filter:DS2Vacuum" ]
physics.producers.g4run.inputSimParticles       : "g4filter:s0"
physics.producers.g4run.simParticleNumberOffset : 200000
