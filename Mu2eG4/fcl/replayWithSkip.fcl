# Same as replayAll.py, except skip the first 10 events.
#
# $Id: replayWithSkip.fcl,v 1.1 2014/08/29 16:16:17 knoepfel Exp $
# $Author: knoepfel $
# $Date: 2014/08/29 16:16:17 $

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"

# Give this job a name.
process_name : replayAll

# Start form an empty source
source :
{
  module_type : RootInput
  fileNames   : "drop_03.root"
  maxEvents   : -1
  skipEvents  : 10
}

services :
{
  message : @local::default_message

  TFileService :
  {
    fileName : "replayWithSkip.root"
  }

  RandomNumberGenerator :
  {
#   be careful when setting restoreStateLabel and make sure that
#   defaultEngineKind is set to "MixMaxRng"
    restoreStateLabel :  randomsaver
    defaultEngineKind : "MixMaxRng"
  }

  GeometryService :
  {
    inputFile : "Mu2eG4/geom/geom_common"
  }

  ConditionsService :
  {
    conditionsfile : "Mu2eG4/test/conditions_01.txt"
  }

  GlobalConstantsService : { inputFile : "Mu2eG4/test/globalConstants_01.txt" }

  G4Helper : { }

}

physics :
{
  producers:
  {

    # Generate Event
    generate:
    {
      module_type   : EventGenerator
      inputfile     : "Mu2eG4/test/genconfig_02.txt"
    }

    # Run G4 and add hits to the event
    g4run :
    {
      module_type          : G4
      generatorModuleLabel : generate
    }

  }


  analyzers:
  {

    checkhits2:
    {
      module_type          : ReadBack
      generatorModuleLabel : generate
      g4ModuleLabel        : g4run
      minimumEnergy        : 0.000
      maxFullPrint         : 201
    }

  }

  p1 : [generate , g4run ]
  e1 : [checkhits, outfile]

  trigger_paths  : [p1]
  end_paths      : [e1]

}

outputs:
{

  outfile :
  {
    module_type   :   RootOutput
    filename      :   "replayWithSkipData.root"
    fastCloning   :   false
  }

}

