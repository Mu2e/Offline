#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"


process_name : corsikaTest

customCutPhoton: {
   type: intersection
   pars: [ { type: kineticEnergy cut: 10. },
         { type: pdgId pars: [ 22 ] }]
}
customCutElectron: {
   type: intersection
   pars: [{type: kineticEnergy cut: 10. },
         { type: pdgId pars: [ 11, -11 ] }]
}
customCutNeutron: {
   type: intersection
   // pars: [{type: kineticEnergy cut: 0.001},
   pars: [{type: kineticEnergy cut: 10.000},
         { type: pdgId pars: [ 2112, -2112 ] }]
}

source : {
  module_type : EmptyEvent
  maxEvents : @nil
}

services : {
  message : @local::default_message
  TFileService : { fileName : "nts.corsikaHist.owner.version.sequencer.root" }
  GeometryService : @local::Services.Core.GeometryService

  ConditionsService : { conditionsfile : "Mu2eG4/test/conditions_01.txt" }
  GlobalConstantsService : { inputFile : "Mu2eG4/test/globalConstants_01.txt" }
  G4Helper : { }
  RandomNumberGenerator : { }
  SeedService : @local::automaticSeeds
  TimeTracker: {
    printSummary: true  # default
  }
}

services.GeometryService.inputFile : "JobConfig/cosmic/geom_cosmic.txt"

physics : {
  producers : {
    corsikaGen : {
      module_type : CORSIKAEventGenerator
      inputFile : "EventGenerator/defaultConfigs/defaultCORSIKAconfig.txt"
    }

    g4run : 
    {
      module_type: Mu2eG4
      physics: @local::mu2eg4DefaultPhysics
      ResourceLimits: @local::mu2eg4DefaultResourceLimits
	    TrajectoryControl: @local::mu2eg4DefaultTrajectories 
      debug: @local::mu2eg4DefaultDebug
      visualization: @local::mu2eg4NoVisualization

      generatorModuleLabel: corsikaGen
      MultiStageParameters: {} // this is the first stage

      SDConfig:
      {
         enableAllSDs: false
         enableSD: [ CRV, calorimeter, stoppingtarget, tracker ]
         TimeVD: { times: [] }
      }

      Mu2eG4StackingOnlyCut: @local::mu2eg4CutNeutrinos
      Mu2eG4SteppingOnlyCut: {}
      Mu2eG4CommonCut: {
        type: union
        pars: [@local::customCutPhoton,
          @local::customCutElectron,
          @local::customCutNeutron
        ]
        // write: customCut
      }
    }

    randomsaver : @local::randomsaver

    genCounter: {
      module_type: GenEventCounter
    }


  }

  analyzers : {

    genCountLogger: {
         module_type: GenEventCountReader 
    }

        corsikaGenPlots: {
         module_type: CORSIKAGenPlots
    }

  }

  trigFilter: [corsikaGen, genCounter, g4run, randomsaver]
  e1 : [outfile]
  ana : [genCountLogger, corsikaGenPlots]

  trigger_paths  : [trigFilter]
  end_paths : [e1, ana]
}

outputs : {
  outfile : {
    module_type : RootOutput
    fileName : "sim.corsikaOut.owner.version.sequencer.art"
  }
}

services.SeedService.baseSeed         :  3425
services.SeedService.maxUniqueEngines :  20

// vim: set ft=cpp:
