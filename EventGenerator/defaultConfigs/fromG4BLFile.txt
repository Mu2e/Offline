//
//
//
//
// Original author Rob Kutschke
// added fromG4BLFile process

// enable process
bool fromG4BLFile.do     = true;

// FromG4BLFile
// Read individual tracks

// Is target frame used in the file?
bool   fromG4BLFile.targetFrame  = false;

// Mean multiplicitie.
double fromG4BLFile.mean         = -1;

// The name of the input file.
string fromG4BLFile.filename     = "particlelist.txt";

// List of pdg Id's in which we are interested.  If empty keep all pdgIds.
vector<int> fromG4BLFile.pdgIdToKeep = { };

// The origin of the G4beamline coordinate system, specified in the Mu2e system.
vector<double> fromG4BLFile.g4beamlineOrigin = { 3904.0, 0.0, -7929.0 };

// The midpoint of the target in the coordinates used in the input file.
vector<double> fromG4BLFile.prodTargetOff = { 0.0, 0.0, 1764.5 };

// An offset relative to the g4beamlineOrigin - used to fix minor discrepancies
// in G4beamline vs Offline geometries.
//vector<double> fromG4BLFile.g4beamlineExtraOffset = { 0.0, 0.0, 0.0 };

// Do we throw or continue when a point is outside of the G4World?
bool   fromG4BLFile.throwOnOutOfWorld = true;

//Number of particles to skip form the input file.
//Useful to run grid-jobs reading different segments of the same txt file
int    fromG4BLFile.particlesToSkip = 0;

// Duplicate the same particle n times, rather then read new particles n times
bool   fromG4BLFile.duplicateParticles = false;

// Control of histograms.
bool   fromG4BLFile.doHistograms = false;


// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
