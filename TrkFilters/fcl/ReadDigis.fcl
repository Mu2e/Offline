#
# Read Tracker digis and run the track trigger prototype 
#
#  > mu2e --config TrkFilters/fcl/ReadDigis.fcl --source "your digis file" --TFile ReadDigis.root --nevts=100
#
#include "fcl/minimalMessageService.fcl"
#include "fcl/standardServices.fcl"
#include "fcl/standardProducers.fcl"
#include "CaloCluster/fcl/prolog_trigger.fcl"
#include "TrkHitReco/fcl/prolog.fcl"
#include "TrkPatRec/fcl/prolog.fcl"


BEGIN_PROLOG
#prescale factor fot the tracker-only track triggers
# downstream e-
tprDeMSeed_evt_sf : 1
tprDeMSeed_sf     : 1
# downstream e+
tprDePSeed_evt_sf : 1
tprDePSeed_sf     : 1
#prescale factor fot the calo-seeded track triggers
# downstream e-
cprDeMSeed_evt_sf : 1
cprDeMSeed_sf     : 1
# downstream e+
cprDePSeed_evt_sf : 1
cprDePSeed_sf     : 1
END_PROLOG

#include "TrkHitReco/fcl/prolog_trigger.fcl"
#include "TrkPatRec/fcl/prolog_trigger.fcl"
#include "TrkFilters/fcl/prolog_trigger.fcl"
#include "TrkDiag/fcl/prolog.fcl"

process_name : ReadDigis

source :
{
    module_type : RootInput
}
# we don't need any simulation services for this job
#services : @local::Services.Reco

services : @local::Services.SimAndReco

# timing information
services.TimeTracker : {
    dbOutput : {
	filename : "ReadDigis.db"
	overwrite : true
    }
}
# setup modules needed to filter tracks
physics :
{
    producers : {
	@table::TrkHitRecoTrigger.producers
	@table::Tracking.producers
	@table::TprTrigger.producers
	@table::CaloClusterTrigger.producers

	RSD : {
	    module_type : ReadStrawDigi
	}
	
    }
    filters : {
	@table::TrkFilters.filters
    }
    # analyzers : {
    #   TrkTriggerDiag : {
    #     module_type : TrkTriggerDiag
    #   }
    # }
}

# create a trigger test path.  Note that physics.trigger_paths and physics.end_paths are not used, art will
# create those automatically from all the defined paths

physics.TCTrigPath : [ TPRFetchDigis, @sequence::TrkFilters.sequences.tprTC        ]

physics.PHTrigPath : [ TPRFetchDigis, @sequence::TrkFilters.sequences.tprPosHelix  ]

physics.DeMSeedTrigPath : [ TPRFetchDigis,  @sequence::TrkFilters.sequences.tprDeMSeed ]

#physics.DeMKalTrigPath : [ @sequence::Tracking.Trigger.DeMKal           ]
physics.DePSeedTrigPath : [ TPRFetchDigis,  @sequence::TrkFilters.sequences.tprDePSeed ] 

# analysis path: this is for monitoring only
# physics.ReadDigisEndPath : [ TrkTriggerDiag ]

services.TFileService.fileName : "readDigis.hist"
services.SeedService.baseSeed : 8
services.SeedService.maxUniqueEngines : 20
