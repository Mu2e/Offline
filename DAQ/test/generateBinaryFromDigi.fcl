# Run ArtBinaryPacketsFromDigis module to combine DataBlocks from
# specified input root files
# Usage: mu2e -c DAQ/test/generateBinaryFromDigi.fcl -s <input root files> -n '-1'
#
#
# Contact person G. Pezzullo

#include "Offline/fcl/minimalMessageService.fcl"
#include "Offline/fcl/standardServices.fcl"
#include "Offline/DAQ/fcl/prolog_trigger.fcl"

process_name : BinaryFromDigi


services : @local::Services.Reco

source : {
  module_type : RootInput
    fileNames   : @nil

    # firstEvent  : 500
    maxEvents   : -1
}

physics : {

   producers : {
      binaryOutput: {
         @table::DAQ.producers.binaryOutput
         generateTimestampTable : 1
      }
   }
   analyzers : {
      readSD :
      {
          module_type : ReadStrawDigiReco
          digisTag    : makeSD
      }

      readCD :
      {
          module_type : CaloDigiAna
         digisTag     : CaloDigiMaker
      }


      readFragments : {
         module_type : FragmentAna
         diagLevel   : 0
         parseCAL    : 1
         parseTRK    : 1
         caloTag     : "daq:calo"
         trkTag      : "daq:trk"
      }
   }

   t1 : [ binaryOutput ]
   #e1 : [ readSD, readCD ]
   e1 : [  readSD, readCD, readFragments ]

   trigger_paths  : [t1]
   end_paths      : [e1]

}

physics.producers.binaryOutput.includeTracker : 1
physics.producers.binaryOutput.includeCalorimeter : 1
physics.producers.binaryOutput.outputFile : "DTC_packets.bin"
services.TFileService.fileName : "generateBinaryFromDigi_test.root"

# physics.producers.binaryOutput.diagLevel : 10
