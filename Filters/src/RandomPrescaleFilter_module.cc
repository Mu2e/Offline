////////////////////////////////////////////////////////////////////////
// Class:       RandomPrescaleFilter
// Module Type: filter
// File:        RandomPrescaleFilter_module.cc
//
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Services/Optional/RandomNumberGenerator.h"
#include "fhiclcpp/ParameterSet.h"
#include "fhiclcpp/types/Atom.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "Offline/SeedService/inc/SeedService.hh"
#include "CLHEP/Random/RandFlat.h"

namespace mu2e
{

  class RandomPrescaleFilter : public art::EDFilter {

    public:

      struct Config {
        fhicl::Atom<float> nPrescale { fhicl::Name("nPrescale"), fhicl::Comment("Average number of events to process for 1 to pass the filter"), 1.0};
        fhicl::Atom<int>   debugLevel{ fhicl::Name("debugLevel"),fhicl::Comment("debug level"),0 };
      };
      using Parameters = art::EDFilter::Table<Config>;

      explicit RandomPrescaleFilter(const Parameters& conf);

      // The destructor generated by the compiler is fine for classes
      // without bare pointers or other resource use.
      // Plugins should not be copied or assigned.

      RandomPrescaleFilter(RandomPrescaleFilter const &) = delete;
      RandomPrescaleFilter(RandomPrescaleFilter &&) = delete;
      RandomPrescaleFilter & operator = (RandomPrescaleFilter const &) = delete;
      RandomPrescaleFilter & operator = (RandomPrescaleFilter &&) = delete;

      bool filter(art::Event & e) override;
      virtual bool endRun(art::Run& run ) override;

    private:
      art::RandomNumberGenerator::base_engine_t& engine_;
      CLHEP::RandFlat randflat_;
      int debug_;
      unsigned nevt_, npass_;
  };

  RandomPrescaleFilter::RandomPrescaleFilter(const Parameters& conf) :
    art::EDFilter{conf},
    engine_(createEngine( art::ServiceHandle<SeedService>()->getSeed())),
    randflat_( engine_, 0.0, conf().nPrescale() ),
    debug_(conf().debugLevel()),
    nevt_(0), npass_(0)
    {}

  inline bool RandomPrescaleFilter::filter(art::Event & event)
  {
    ++nevt_;
    bool retval = randflat_.fire() <= 1.0;
    if(retval) ++npass_;
    return retval;
  }

  bool RandomPrescaleFilter::endRun( art::Run& run ) {
    if(debug_ > 0 && nevt_ > 0){
      std::cout << moduleDescription().moduleLabel() << " passed " << npass_ << " events out of " << nevt_ << " for a ratio of " << float(npass_)/float(nevt_) << std::endl;
    }
    return true;
  }

}
using mu2e::RandomPrescaleFilter;
DEFINE_ART_MODULE(RandomPrescaleFilter)
