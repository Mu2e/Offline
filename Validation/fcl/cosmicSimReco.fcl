#
# generate and simulate cosmics and reconstruct in the CRV
#

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardServices.fcl"
#include "fcl/standardProducers.fcl"
#include "CRVResponse/fcl/prolog.fcl"


BEGIN_PROLOG

CosmicOuterShower: 
{
   type: intersection
   pars: 
   [
      { type: plane normal: [  0,  0, -1 ] point : [ -3904, 0, 17000 ] }, //-z
      { type: plane normal: [  0,  0,  1 ] point : [ -3904, 0, 25000 ] }, //+z
      { type: plane normal: [  1,  0,  0 ] point : [ -1900, 0, 21000 ] }, //+x
      { type: plane normal: [ -1,  0,  0 ] point : [ -5900, 0, 21000 ] }, //-x
      { type: plane normal: [  0,  1,  0 ] point : [ -3904, 1000, 21000 ] }, //+y
      { type: plane normal: [  0, -1,  0 ] point : [ -3904, -1000, 21000 ] }, //-y
      { type: kineticEnergy cut: 80.0 }, 
      { type: pdgId pars: [ 22, 11, -11 ] }
   ]
}

inDirt: 
{
   type: inVolume
   pars: [ worldDirtBottom, worldDirtNW, worldDirtSW, worldDirtSE, worldDirtNE ]
}

SpeedUpCosmics: {
   type: union
   pars: 
   [
      @local::CosmicOuterShower ,
      @local::inDirt
   ]
}
END_PROLOG


process_name : cosmicSimReco

services : @local::Services.Sim

source.module_type : EmptyEvent

physics : {
   producers: {
      generate: {
         module_type          : EventGenerator
         inputfile            : "JobConfig/cosmic/genconfig_cosmic_general.txt"
      }
      @table::Mu2eG4.producers
      @table::CommonMC.producers
      @table::CrvDAQPackage.producers
      @table::CrvRecoMCPackage.producers
   }

   filters : {
      g4status: {
         module_type: FilterStatusG4
         input: "g4run"
      }
      cosmicFilter: 
      {
	 module_type: FilterG4Out
	 mainHitInputs : [ "g4run:CRV" ]
	 extraHitInputs : []
	 mcTrajectoryInputs : [ ]
	 vetoDaughters: []
      }

   }

   all_path : [ 
      generate, 
      g4run, g4status , 
      cosmicFilter ,
      @sequence::CommonMC.DigiSim ,
      @sequence::CrvDAQPackage.CrvResponseSequence ,
      @sequence::CrvRecoMCPackage.CrvRecoMCSequence
   ]

    trigger_paths  : [ all_path ]
    out : [ fullOutput ]
    end_paths      : [ out ]

}

outputs: {
   fullOutput : {
      module_type : RootOutput
      SelectEvents: ["all_path"]
      fileName    : @nil
      outputCommands:   
      [ 
         "keep *_*_*_*",
	 "drop mu2e::SimParticlemv_g4run_*_*",
	 "drop mu2e::StepPointMCs_g4run_CRV_*",
	 "drop *_protonTimeMap_*_*",
	 "drop *_muonTimeMap_*_*"
      ]
    }
}

# turn off trajectories
simulation.default.mod.g4run.TrajectoryControl: @local::mu2eg4NoTrajectories

# generate the cosmics at one time
physics.producers.cosmicTimeMap.tmin : 800
physics.producers.cosmicTimeMap.tmax : 800

# Larger range cut for the first stage - OK for CRV itself
physics.producers.g4run.physics.minRangeCut : 1.0 // mm

# stop showers outside the detector
physics.producers.g4run.Mu2eG4CommonCut : @local::SpeedUpCosmics

# only simulate CRV
physics.producers.g4run.SDConfig.enableSD : [ CRV ]

# this is necessary because the standard fcl will 
# collect all StepPoints with instance CRV.  This will 
# pick up both the g4run collection and the filtered collection,
# so select only the latter
physics.producers.CrvPhotons.g4ModuleLabels : ["cosmicFilter"]

# turn off very verbose
physics.producers.CrvCoincidence.verboseLevel : 0
physics.producers.CrvCoincidenceClusterFinder.verboseLevel : 0

# print summaries
services.scheduler.wantSummary: true
services.TimeTracker.printSummary: true

# histogram file
services.TFileService.fileName : "nts.owner.val-cosmicSimReco.dsconf.seq.root"
# art file
outputs.fullOutput.fileName : "mcs.owner.val-cosmicSimReco.dsconf.seq.art"

# run 1h by default
source.maxEvents: 50000

// Initialze seeding of random engines
services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20

// use the geometry on the head
services.GeometryService.inputFile : "Mu2eG4/geom/geom_common_current.txt"

