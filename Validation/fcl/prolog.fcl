#include "fcl/minimalMessageService.fcl"
#include "fcl/standardServices.fcl"
#include "fcl/standardProducers.fcl"


BEGIN_PROLOG

service : {
   all : {
      @table::Services.SimAndReco
   }
}



generation : {
   CE: {
      mod : {
	 generate : { @table::StoppedParticleReactionGun }
      }
      seq : [ generate ]
   }

   POT: {
      mod : {
	 generate: {
            module_type          : EventGenerator
            inputfile            : "JobConfig/beam/genconfig_PrimaryProtons.txt"
	 }
      }
      seq : [ generate ]
   }
   cosmic: {
      mod : {
	 generate: {
            module_type          : EventGenerator
            inputfile            : "JobConfig/cosmic/genconfig_cosmic_general.txt"
	 }
      }
      seq : [ generate ]
   }

}

simulation : {
   default: {
      mod : {
	 @table::Mu2eG4.producers
      }
      flt : {
	 g4status: {
            module_type: FilterStatusG4
            input: "g4run"
	 }
      }
      seq : [ g4run, g4status ]
   }
}
simulation.default.mod.g4run.TrajectoryControl: @local::mu2eg4NoTrajectories
simulation.default.mod.g4run.ResourceLimits.maxSimParticleCollectionSize: 100000

timeSimulation : {
   all: {
      mod : {
	 @table::CommonMC.producers
      }
      seq : [ @sequence::CommonMC.DigiSim ]
   }
}

digis : {
   straw : { 
      mod : {
	 @table::TrackerMC.producers
      }
      seq : [ @sequence::TrackerMC.DigiSim ]
   }

   cal : {
      mod : {
	 @table::CaloDigiMC.producers
      }
      seq : [ @sequence::CaloDigiMC.DigiSim ]
   }

   crv : {
      mod : {
	 @table::CrvDAQPackage.producers
      }
      seq : [ @sequence::CrvDAQPackage.CrvResponseSequence ]
   }
} 

# these need to be run after CalHitReco
#	 @table::CaloDigiMC.producersMC
# @sequence::CaloDigiMC.TruthMatch

reco : {

   # make straw hits, flag bg hits, make stereo hits
   straw : { 
      mod : {
	 @table::TrkHitReco.producers
      }
      seq : [ @sequence::TrkHitReco.PrepareHits ]
   } # end straw

   # tracking (inside reco braces)
   trk : {
      mod : {
	 @table::Tracking.producers
      }
      seq : {
	 all : [ @sequence::Tracking.TPRDeM, @sequence::Tracking.TPRUeM,
	    @sequence::Tracking.TPRDeP, @sequence::Tracking.TPRUeP,
            @sequence::Tracking.TPRDmuM,@sequence::Tracking.TPRUmuM,
            @sequence::Tracking.TPRDmuP,@sequence::Tracking.TPRUmuP,
            @sequence::Tracking.TPRDpiM,@sequence::Tracking.TPRUpiM,
            @sequence::Tracking.TPRDpiP,@sequence::Tracking.TPRUpiP ]
	 ele : [ @sequence::Tracking.TPRDeM, @sequence::Tracking.TPRUeM,
	    @sequence::Tracking.TPRDeP, @sequence::Tracking.TPRUeP ]
	 eleDMUP : [ @sequence::Tracking.TPRDeM, @sequence::Tracking.TPRUeP ]
	 eleDMDP : [ @sequence::Tracking.TPRDeM, @sequence::Tracking.TPRDeP ]
      } # end reco.trk.seq

   } # end reco.trk


   # still inside reco
   cal : { 
      mod : {
	 @table::CaloReco.producers
	 @table::CaloCluster.producers
      }
      seq : [ @sequence::CaloReco.Reco, @sequence::CaloCluster.Reco ]
   } # end cal reco


   # CalPatRec tracking. Requires hits are make by straw reco
   ctrk : {
      mod : {
	    @table::CalPatRec.producers
      }
      flt : {
	    @table::CalPatRec.filters
      }
      seq : [ @sequence::CalPatRec.dem_reco, MergePatRecDem ]
   } # end ctrk reco

   pid : {
      mod : {
	    @table::TrackCaloMatching.producers
      }
      seq : [ @sequence::TrackCaloMatching.matching_dem ]
   } # end pid reco

   # CRV coincidences
   crv : { 
      mod : {
	 CrvRecoPulses               : @local::CrvRecoPulses
	 CrvCoincidence              : @local::CrvCoincidence
	 CrvCoincidenceClusterFinder : @local::CrvCoincidenceClusterFinder
      }
      seq : [ CrvRecoPulses, CrvCoincidence, CrvCoincidenceClusterFinder ]
   } # end crv reco

}

# Below are cuts for use in cosmic generation

# stop simulation of low-energy electrons far from the detector
CosmicOuterShower: 
{
   type: intersection
   pars: 
   [
      { type: plane normal: [  0,  0, -1 ] point : [ -3904, 0, 17000 ] }, //-z
      { type: plane normal: [  0,  0,  1 ] point : [ -3904, 0, 25000 ] }, //+z
      { type: plane normal: [  1,  0,  0 ] point : [ -1900, 0, 21000 ] }, //+x
      { type: plane normal: [ -1,  0,  0 ] point : [ -5900, 0, 21000 ] }, //-x
      { type: plane normal: [  0,  1,  0 ] point : [ -3904, 1000, 21000 ] }, //+y
      { type: plane normal: [  0, -1,  0 ] point : [ -3904, -1000, 21000 ] }, //-y
      { type: kineticEnergy cut: 80.0 }, 
      { type: pdgId pars: [ 22, 11, -11 ] }
   ]
}

inDirt: 
{
   type: inVolume
   pars: [ worldDirtBottom, worldDirtNW, worldDirtSW, worldDirtSE, worldDirtNE ]
}

SpeedUpCosmics: {
   type: union
   pars: 
   [
      @local::CosmicOuterShower ,
      @local::inDirt
   ]
}
 
# only accpet events that have hits in the CRV, 
# and only save related SimParticles - saves space
cosmicFilter: 
{
   mod : {
      cosmicFilter: 
      {
	 module_type: FilterG4Out
	 mainHitInputs : [ "g4run:CRV" ]
	 extraHitInputs : []
	 mcTrajectoryInputs : [ ]
	 numSimParticleCollections : 1
	 vetoDaughters: []
      }
   }
   seq : [ cosmicFilter ]
}


END_PROLOG
