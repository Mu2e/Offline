#
# generate conversion electrons from stopped muon file
# and simulate all the way through the detector
# run calorimeter and tracker reco
#

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardServices.fcl"
#include "JobConfig/primary/prolog.fcl"
#include "JobConfig/digitize/prolog.fcl"
#include "JobConfig/reco/prolog.fcl"

process_name : ceSimReco

source : { module_type :EmptyEvent }
services: @local::Services.SimAndReco

physics: {
  producers : {
    @table::Primary.producers
    @table::Digitize.producers
    @table::Reconstruction.producers
#    @table::Trigger.producers 
    generate : @local::CeEndpointGun
  }
  filters : { 
    @table::Primary.filters
    @table::Digitize.filters 
    @table::Reconstruction.filters
#    @table::Trigger.filters
  }
  analyzers: {
    @table::Primary.analyzers
    @table::Digitize.analyzers
    @table::Reconstruction.analyzers
#    @table::Trigger.analyzers
  }

  TriggerPath : [
    @sequence::Primary.TriggerPath,
    @sequence::Digitize.TriggerPath,
    @sequence::Reconstruction.CaloReco,
    @sequence::Reconstruction.TrkReco,
    @sequence::Reconstruction.CrvReco,
    @sequence::Reconstruction.DeReco,
    @sequence::Reconstruction.MCReco,
    RecoFilter
  ]
  EndPath : [
    @sequence::Primary.EndSequence,
    @sequence::Digitize.EndSequence,
    @sequence::Reconstruction.EndSequence,
    Output
  ]
}

outputs : { 
  Output : {
     module_type : RootOutput
     SelectEvents : [ TriggerPath ]
     fileName    : @nil
     outputCommands : [
	 @sequence::Reconstruction.HighRecoProducts,
	 @sequence::Reconstruction.MCRecoProducts,
	 @sequence::Digitize.KeptProducts,
	 @sequence::Primary.KeptProducts,
	 # drop reco products which be empty
	 "drop mu2e::Crv*_*_*_*",
	 "drop *_*_cosmicTimeMap_*",
	 "drop *_g4run_*_*",
	 "drop mu2e::StepPointMCs_*_CRV_*",
	 "drop mu2e::SimParticleart::Ptrmu2e::MCTrajectorystd::map_*_*_*", 
	 "drop *_*DeP_*_*",
	 "drop *_compressDetStepMCs_*_*",
	 "drop *_compressDigiMCs_*_*",
	 "drop mu2e::CaloDigis_CaloDigiMaker_*_*",
         "drop mu2e::StrawDigiADCWaveforms_makeSD_*_*",
         "drop mu2e::StrawDigis_makeSD_*_*",
	 "keep mu2e::CaloShowerSteps_compressDigiMCs_*_*",
	 "keep mu2e::StatusG4_*_*_*"
     ]
  }
}
#include "JobConfig/primary/epilog.fcl"
#include "JobConfig/digitize/epilog.fcl"
#include "JobConfig/reco/epilog.fcl"
physics.analyzers.digiCompressionCheck.SelectEvents : [ TriggerPath ]
physics.analyzers.recoCompressionCheck.SelectEvents : [ TriggerPath ]
#
# on-spill EWM
physics.producers.EWMProducer.SpillType : 1
# add trigger paths
# This doesn't currently work, as the step filter stops processing before digis are made, and
# the digis are required for trigger FIXME!
##include "gen/fcl/Trigger/OnSpillTrigMenu/OnSpillTrigMenu.fcl"

# print summaries
services.scheduler.wantSummary: true
services.TimeTracker.printSummary: true

# histogram file
services.TFileService.fileName: "/dev/null"
# art file 
outputs.Output.fileName : "mcs.owner.val-ceSimReco.dsconf.seq.art"

# run 1h by default
source.maxEvents: 5000

# Initialze seeding of random engines
services.SeedService.baseSeed         :  8
services.SeedService.maxUniqueEngines :  20

# use the geometry on the head
services.GeometryService.inputFile : "Mu2eG4/geom/geom_common_current.txt"

# explicit muon stop input file
physics.producers.generate.muonStops.inputFiles : [
"mergedMuonStops/nts.mu2e.DS-TGTstops.MDC2018a.001002_00000000.root" ]


